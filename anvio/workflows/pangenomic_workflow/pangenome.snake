import os
import anvio
import pandas as pd
import anvio.workflows as w
from anvio.errors import ConfigError
import anvio.filesnpaths as filesnpaths
from anvio.workflows.workflowsops import PangenomicsWorkflow

# Get all the folder names from the config file
# the default names are defined in anvio/workflows/__init__.py
# the directories in use for this workflow are "LOGS_DIR", "CONTIGS_DIR", "PROFILE_DIR", "PAN_DIR"

workflow = PangenomicsWorkflow(config)
workflow.init()
dirs_dict = workflow.dirs_dict

project_name = config["project_name"]
pan_project_name = w.A(["anvi_pan_genome", "--project-name"], config, project_name)

# the default name for the input samples.txt file is "samples.txt"
samples_txt = w.A("samples_txt", config, "samples.txt")
filesnpaths.is_file_exists(samples_txt)
samples_information = pd.read_csv(samples_txt, sep='\t', index_col=0).to_dict(orient='index')
ALL_SAMPLES = list(samples_information.keys())

internal_genomes_file = w.A(["anvi_gen_genomes_storage", "--internal-genomes"], config)
external_genomes_file = w.A(["anvi_gen_genomes_storage", "--external-genomes"], config)

if (not internal_genomes_file) and (not external_genomes_file):
    raise ConfigError("You must provide a path to either internal_genomes_file or external_genomes_file\
                       or both.")

# in order to generate the contigs databases we include the snakefile for the generation of contigs databases

# run pangenome
rule anvi_pan_genome:
    version: anvio.__pan__version__
    log: dirs_dict["LOGS_DIR"] + "/anvi_pan_genome.log"
    threads: w.T(config, "anvi_pan_genome", 20)
    resources: nodes = w.T(config, "anvi_pan_genome", 20)
    input: dirs_dict["PAN_DIR"] + "/" + project_name + "-GENOMES.db"
    params:
        output_dir = dirs_dict["PAN_DIR"],
        genome_names = w.B(config, "anvi_pan_genome", "--genome-names"),
        project_name = pan_project_name,
        skip_alignments = w.B(config, "anvi_pan_genome", "--skip-alignments"),
        align_with = w.B(config, "anvi_pan_genome", "--align-with"),
        exclude_partial_gene_calls = w.B(config, "anvi_pan_genome", "--exclude-partial-gene-calls"),
        use_ncbi_blast = w.B(config, "anvi_pan_genome", "--use-ncbi-blast"),
        minbit = w.B(config, "anvi_pan_genome", "--minbit"),
        mcl_inflation = w.B(config, "anvi_pan_genome", "--mcl-inflation"),
        min_occurrence = w.B(config, "anvi_pan_genome", "--min-occurrence"),
        min_percent_identity = w.B(config, "anvi_pan_genome", "--min-percent-identity"),
        sensitive = w.B(config, "anvi_pan_genome", "--sensitive"),
        description = w.B(config, "anvi_pan_genome", "--description"),
        overwrite_output_destinations = w.B(config, "anvi_pan_genome", "--overwrite-output-destinations"),
        skip_hierarchical_clustering = w.B(config, "anvi_pan_genome", "--skip-hierarchical-clustering"),
        enforce_hierarchical_clustering = w.B(config, "anvi_pan_genome", "--enforce-hierarchical-clustering"),
        distance = w.B(config, "anvi_pan_genome", "--distance"),
        linkage = w.B(config, "anvi_pan_genome", "--linkage")
    output: dirs_dict["PAN_DIR"] + "/" + pan_project_name + "-PAN.db"
    shell:
        """
            anvi-pan-genome -g {input} --num-threads {threads} -o {params.output_dir} {params.genome_names}\
            {params.skip_alignments} {params.align_with} {params.exclude_partial_gene_calls}\
            {params.use_ncbi_blast} {params.minbit} {params.mcl_inflation}\
            {params.min_occurrence} {params.min_percent_identity} {params.sensitive}\
            {params.project_name} {params.description} {params.overwrite_output_destinations}\
            {params.skip_hierarchical_clustering} {params.enforce_hierarchical_clustering}\
            {params.distance} {params.linkage}
        """


include: w.get_path_to_workflows_dir() + "/generate_and_annotate_contigs_db.snake"

# generate external genomes storage 
rule gen_external_genome_file:
    version: 1.0
    log: dirs_dict["LOGS_DIR"] + "" + "/gen_external_genome_file.log"
    input:
        annotation_done = expand(dirs_dict['CONTIGS_DIR'] + "/{sample}-annotate_contigs_database.done", sample=ALL_SAMPLES),
        contigs_dbs = expand(dirs_dict["CONTIGS_DIR"] + "/{sample}-contigs.db", sample=ALL_SAMPLES)
    output: external_genomes_file
    threads: w.T(config, "gen_external_genome_file", 1)
    resources: nodes = w.T(config, "gen_external_genome_file", 1)
    run:
        with open(output[0], 'w') as f:
            f.write("name\tcontigs_db_path\n")
            for c in input.contigs_dbs:
                f.write("%s\t%s\n" % (c.split(".")[0].split("/")[-1].replace('-','_'), c))

def input_for_anvi_gen_genomes_storage(wildcards):
    # make sense of config file to know if user is using internal genomes
    # or external genomes or both
    d = {}

    # ok, so pay attention, because the next few lines might seem like a mistake
    # but actually this is a trick. Since we know at least one of the genomes file
    # must be provided then we can set each file to point to the other one,
    # and that way whichever file was not provided would just point to the other file
    # and thus the rule would be happy (confused? then ask Alon Shaiber)
    d["internal_genomes_file"] = external_genomes_file
    d["external_genomes_file"] = internal_genomes_file
    if internal_genomes_file:
        d["internal_genomes_file"] = internal_genomes_file
    if external_genomes_file:
        d["external_genomes_file"] = external_genomes_file
    return d


# generate anvi'o genomes storage 
rule anvi_gen_genomes_storage:
    log: dirs_dict["LOGS_DIR"] + "/anvi_gen_genomes_storage.log"
    threads: w.T(config, "anvi_gen_genomes_storage", 1)
    resources: nodes = w.T(config, "anvi_gen_genomes_storage", 1)
    input: unpack(input_for_anvi_gen_genomes_storage)
    output: dirs_dict["PAN_DIR"] + "/" + project_name + "-GENOMES.db"
    params:
        internal_genomes_argument = lambda wildcards: "--internal-genomes " + internal_genomes_file if internal_genomes_file else "",
        external_genomes_argument = lambda wildcards: "--external-genomes " + external_genomes_file if external_genomes_file else "",
        gene_caller = w.B(config, "anvi_gen_genomes_storage", "--gene-caller"),
    shell:
        """
            anvi-gen-genomes-storage -o {output}\
                                     {params.internal_genomes_argument}\
                                     {params.external_genomes_argument}\
                                     {params.gene_caller}
        """

