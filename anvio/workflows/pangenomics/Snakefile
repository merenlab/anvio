# -*- coding: utf-8

import os
import anvio
import argparse
import pandas as pd
import anvio.workflows as w
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths

from anvio.workflows.pangenomics import PangenomicsWorkflow

__author__ = "Alon Shaiber"
__copyright__ = "Copyright 2017, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Alon Shaiber"
__email__ = "alon.shaiber@gmail.com"

run = terminal.Run()

slave_mode= False if 'workflows/pangenomics' in workflow.included[0] else True

if not slave_mode:
    M = PangenomicsWorkflow(argparse.Namespace(config=config))
    M.init()
    dirs_dict = M.dirs_dict
    # in order to generate the contigs databases we include the snakefile for the generation of contigs databases
    # include statement must come after we get an instance of PangenomicsWorkflow class
    include: w.get_workflow_snake_file_path('contigs')

# run pangenome
rule anvi_pan_genome:
    version: anvio.__pan__version__
    log: dirs_dict["LOGS_DIR"] + "/anvi_pan_genome.log"
    threads: M.T("anvi_pan_genome")
    resources: nodes = M.T("anvi_pan_genome")
    input: dirs_dict["PAN_DIR"] + "/" + M.project_name + "-GENOMES.db"
    params:
        output_dir = dirs_dict["PAN_DIR"],
        genome_names = M.get_rule_param("anvi_pan_genome", "--genome-names"),
        project_name = M.pan_project_name,
        skip_alignments = M.get_rule_param("anvi_pan_genome", "--skip-alignments"),
        align_with = M.get_rule_param("anvi_pan_genome", "--align-with"),
        exclude_partial_gene_calls = M.get_rule_param("anvi_pan_genome", "--exclude-partial-gene-calls"),
        use_ncbi_blast = M.get_rule_param("anvi_pan_genome", "--use-ncbi-blast"),
        minbit = M.get_rule_param("anvi_pan_genome", "--minbit"),
        mcl_inflation = M.get_rule_param("anvi_pan_genome", "--mcl-inflation"),
        min_occurrence = M.get_rule_param("anvi_pan_genome", "--min-occurrence"),
        min_percent_identity = M.get_rule_param("anvi_pan_genome", "--min-percent-identity"),
        sensitive = M.get_rule_param("anvi_pan_genome", "--sensitive"),
        description = M.get_rule_param("anvi_pan_genome", "--description"),
        overwrite_output_destinations = M.get_rule_param("anvi_pan_genome", "--overwrite-output-destinations"),
        skip_hierarchical_clustering = M.get_rule_param("anvi_pan_genome", "--skip-hierarchical-clustering"),
        enforce_hierarchical_clustering = M.get_rule_param("anvi_pan_genome", "--enforce-hierarchical-clustering"),
        distance = M.get_rule_param("anvi_pan_genome", "--distance"),
        linkage = M.get_rule_param("anvi_pan_genome", "--linkage")
    output: dirs_dict["PAN_DIR"] + "/" + M.pan_project_name + "-PAN.db"
    shell:
        """
            anvi-pan-genome -g {input} --num-threads {threads} -o {params.output_dir} --project-name {params.project_name} {params.genome_names}\
            {params.skip_alignments} {params.align_with} {params.exclude_partial_gene_calls}\
            {params.use_ncbi_blast} {params.minbit} {params.mcl_inflation}\
            {params.min_occurrence} {params.min_percent_identity} {params.sensitive}\
            {params.description} {params.overwrite_output_destinations}\
            {params.skip_hierarchical_clustering} {params.enforce_hierarchical_clustering}\
            {params.distance} {params.linkage} >> {log} 2>&1
        """


# generate anvi'o genomes storage
rule anvi_gen_genomes_storage:
    log: dirs_dict["LOGS_DIR"] + "/anvi_gen_genomes_storage.log"
    threads: M.T("anvi_gen_genomes_storage")
    resources: nodes = M.T("anvi_gen_genomes_storage")
    input: unpack(lambda wildcards: M.input_for_anvi_gen_genomes_storage)
    output: dirs_dict["PAN_DIR"] + "/" + M.project_name + "-GENOMES.db"
    params:
        internal_genomes_argument = lambda wildcards: "--internal-genomes " + M.internal_genomes_file if M.internal_genomes_file else "",
        external_genomes_argument = lambda wildcards: "--external-genomes " + M.external_genomes_file if M.external_genomes_file else "",
        gene_caller = M.get_rule_param("anvi_gen_genomes_storage", "--gene-caller"),
    shell:
        """
            anvi-gen-genomes-storage -o {output}\
                                     {params.internal_genomes_argument}\
                                     {params.external_genomes_argument}\
                                     {params.gene_caller} >> {log} 2>&1
        """

if 'workflows/pangenomics' in workflow.included[0]:
    M.check_workflow_program_dependencies(workflow)
