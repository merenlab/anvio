#!/usr/bin/env python
# -*- coding: utf-8

import sys
import anvio
import anvio.metabolicexchanges as me

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program

__copyright__ = "Copyleft 2015-2025, The Anvi'o Project (http://anvio.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva']
__requires__ = ['contigs-db', 'reaction-network', 'equivalent-compounds-txt', 'external-genomes', 'genome-pairs', 
                'reaction-ref-data', 'kegg-data']
__provides__ = ['metabolite-exchange-predictions']
__description__ = "Predicts metabolic exchanges between microbes based on the reaction network"


@time_program
def main():
    args = get_args()

    try:
        if args.external_genomes:
            predictor = me.ExchangePredictorMulti(args)
        elif args.contigs_db_1 or args.contigs_db_2:
            predictor = me.ExchangePredictorSingle(args)
        elif args.genome_pairs_txt:
            raise ConfigError("If you provide a `--genome-pairs-txt` file, you must ALSO provide "
                              "an external genomes file describing the paths to the contigs database "
                              "of each genome you want to analyze.")
        else:
            raise ConfigError("None of the input options were provided to the program.")

        predictor.predict_exchanges()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)


def get_args():
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT - SINGLE PAIR OF GENOMES', "Just give us contigs databases that already had reaction networks generated "
                                                        "for them via `anvi-reaction-network`, and we will do the rest.")
    groupA.add_argument('-c1', '--contigs-db-1', required=False, help="Contigs database (generated by `anvi-gen-contigs-database`) for your first genome")
    groupA.add_argument('-c2', '--contigs-db-2', required=False, help="Contigs database (generated by `anvi-gen-contigs-database`) for your second genome")

    groupM = parser.add_argument_group('INPUT - MULTIPLE PAIRS OF GENOMES (MULTI-MODE)', "If you have multiple contigs databases to work with, you can put them all into a file. "
                                                   "Then anvi'o will predict exchanges between each pair of genomes. If you want to run an 'all-vs-all' "
                                                   "comparison, then provide just an external genomes file. If you want to run comparisons only "
                                                   "between specific pairs of genomes, then you should also provide a genome pairs file. Have internal genomes (bins) "
                                                   "instead? Well, then you should use `anvi-split` to get separate contigs databases for each bin so that you can "
                                                   "use --external-genomes for them.")
    groupM.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))
    groupM.add_argument(*anvio.A('genome-pairs-txt'), **anvio.K('genome-pairs-txt'))

    groupB = parser.add_argument_group('OUTPUT', "How do you want to see the results?")
    groupB.add_argument(*anvio.A('output-file-prefix'), **anvio.K('output-file-prefix', {'required': True}))

    groupC = parser.add_argument_group('METABOLISM DATA LOCATION', "What metabolism database(s) do you want to use?")
    groupC.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir'))
    groupC.add_argument(*anvio.A('modelseed-data-dir'), **anvio.K('modelseed-data-dir'))

    groupD = parser.add_argument_group('CUSTOMIZATION', "Decisions only you can make.")
    groupD.add_argument(*anvio.A('use-equivalent-amino-acids'), **anvio.K('use-equivalent-amino-acids'))
    groupD.add_argument(*anvio.A('custom-equivalent-compounds-file'), **anvio.K('custom-equivalent-compounds-file'))
    groupD.add_argument(*anvio.A('maximum-gaps'), **anvio.K('maximum-gaps'))
    groupD.add_argument(*anvio.A('add-reactions-to-output'), **anvio.K('add-reactions-to-output'))
    groupD.add_argument(*anvio.A('exclude-pathway-maps'), **anvio.K('exclude-pathway-maps'))

    groupE = parser.add_argument_group('PERFORMANCE', "Because ain't nobody got time for that")
    groupE.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupE.add_argument(*anvio.A('num-parallel-processes'), **anvio.K('num-parallel-processes', {'help': "(MULTI-MODE ONLY) Explicitly set the number of genome pairs "
                                                            "to process in parallel. Please note that this is different than number of threads. If you ask for "
                                                            "4 parallel processes and 5 threads, anvi'o will compare 4 genome pairs at once and assign 5 threads to each "
                                                            "comparison. For resource allocation you must multiply the number of processes and threads. If you use the "
                                                            "default (1 process) but ask for more than one thread, then anvi'o will use the number of threads as the "
                                                            "number of genome pairs to process in parallel (but each comparison will get just 1 thread)."}))
    groupE.add_argument(*anvio.A('no-pathway-walk'), **anvio.K('no-pathway-walk'))
    groupE.add_argument(*anvio.A('pathway-walk-only'), **anvio.K('pathway-walk-only'))

    return parser.get_args(parser)


if __name__ == '__main__':
    main()
