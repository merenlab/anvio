#!/usr/bin/env python
# -*- coding: utf-8

import argparse
import anvio
import anvio.utils
import anvio.constants
import pandas as pd
import numpy as np
import anvio.db
import os
import gc
import scipy.stats as stats
from collections import OrderedDict

gast_ranks = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species', 'subspecies']
num_gast_ranks = len(gast_ranks)
anticodons = sorted(anvio.utils.rev_comp(codon) for codon in anvio.constants.codons)
nts = ['A', 'C', 'G', 'T']
m1A_cols = ['position_22', 'position_58', 'position_59']

def split_taxonomy_col(col):
    table = []
    for string in col:
        row = string.split(';')
        row += [''] * (num_gast_ranks - len(row))
        table.append(row)
    return table

def load_split_df(tRNASeqDB, gast):

    # profileDB = anvio.db.DB(profileDB, 32)
    # ntDF = profileDB.get_table_as_dataframe('variable_nucleotides')
    # ntDF['name'] = ntDF['split_name'].apply(lambda x: x.split('_split_')[0])
    # ntDF.set_index('name', inplace=True)

    tRNADB = anvio.db.DB(tRNASeqDB, 1)
    df = pd.DataFrame(
        tRNADB.get_some_columns_from_table('sequences', 'name,sequence,replicate_count'),
        columns=['name', 'sequence', 'replicate_count'])
    df.rename(columns={'replicate_count': 'coverage'}, inplace=True)
    df['anticodon_sequence'], df['amino_acid'] = zip(*tRNADB.get_some_columns_from_table(
        'basic_info', 'anticodon_sequence,amino_acid'))
    df['position_26_start'], df['t_loop_stop'] = zip(*tRNADB.get_some_columns_from_table(
        'features', 'position_26_start,t_loop_stop'))
    df.replace('??', np.nan, inplace=True)
    df.set_index('name', inplace=True)
    df['position_22'] = df['position_26_start'] - 4
    df['position_58'] = df['t_loop_stop'] - 3
    df['position_59'] = df['t_loop_stop'] - 2
    df.drop(['position_26_start', 't_loop_stop'], axis=1, inplace=True)

    gastDF = pd.read_csv(gast, sep='\t', usecols=['read_id', 'taxonomy'])
    gastDF.rename(columns={'read_id': 'name'}, inplace=True)
    gastDF[gast_ranks] = pd.DataFrame(split_taxonomy_col(gastDF['taxonomy'].tolist()))
    gastDF.drop('taxonomy', axis=1, inplace=True)
    gastDF['species'] = (gastDF[gastDF['species'] != '']['genus'] # Unlike other ranks, species names are not unique, so must be combined with genus
                         + ' '
                         + gastDF[gastDF['species'] != '']['species'])
    gastDF['species'].fillna('', inplace=True)
    gastDF.drop('subspecies', axis=1, inplace=True)
    gastDF.set_index('name', inplace=True)

    df = df.join(gastDF)
    del gastDF
    gc.collect()

    return df


def analyze_mods_for_each_taxon_anticodon(dmDF, unDF):
    modRankDFDict = OrderedDict()

    for m1A_col in m1A_cols:
        dmDF[m1A_col + '_nt'] = ['' if pd.isnull(m1A_pos) else seq[int(m1A_pos)]
                                 for seq, m1A_pos in zip(dmDF['sequence'], dmDF[m1A_col])]
        unDF[m1A_col + '_nt'] = ['' if pd.isnull(m1A_pos) else seq[int(m1A_pos)]
                                 for seq, m1A_pos in zip(unDF['sequence'], unDF[m1A_col])]

        for nt in nts:
            dmDF[nt] = [cov if mod_nt == nt else 0
                        for mod_nt, cov in zip(dmDF[m1A_col + '_nt'], dmDF['coverage'])]
            unDF[nt] = [cov if mod_nt == nt else 0
                        for mod_nt, cov in zip(unDF[m1A_col + '_nt'], unDF['coverage'])]

        rankDFList = []
        for rank in gast_ranks[:-1]:
            anticodonDF = dmDF.groupby([rank, 'anticodon_sequence', 'amino_acid'])[nts].sum().join(
                unDF.groupby([rank, 'anticodon_sequence', 'amino_acid'])[nts].sum(),
                how='outer', lsuffix='_dm', rsuffix='_un')

            anticodonDF['un_nt_sum'] = anticodonDF[[nt + '_un' for nt in nts]].sum(1)
            anticodonDF['dm_nt_sum'] = anticodonDF[[nt + '_dm' for nt in nts]].sum(1)
            hiAnticodonDF = anticodonDF[(anticodonDF['un_nt_sum'] >= 50) & (anticodonDF['dm_nt_sum'] >= 50)]
            anticodonDF.drop(['un_nt_sum', 'dm_nt_sum'], axis=1, inplace=True)
            hiAnticodonDF[[nt + '_un_frac' for nt in nts]] = hiAnticodonDF[
                [nt + '_un' for nt in nts]].div(hiAnticodonDF['un_nt_sum'], axis=0)
            hiAnticodonDF[[nt + '_dm_expect' for nt in nts]] = hiAnticodonDF[
                [nt + '_un_frac' for nt in nts]].mul(hiAnticodonDF['dm_nt_sum'], axis=0).round(0)

            entropydiffs = []
            pvalues = []
            for dm_counts, dm_expect_counts in zip(
                hiAnticodonDF[[nt + '_dm' for nt in nts]].to_records(index=False),
                hiAnticodonDF[[nt + '_dm_expect' for nt in nts]].to_records(index=False)):
                chisquare_obs = []
                chisquare_expect = []
                for dm_count, dm_expect_count in zip(dm_counts, dm_expect_counts):
                    if dm_count == 0 or dm_expect_count == 0:
                        continue
                    else:
                        chisquare_obs.append(dm_count)
                        chisquare_expect.append(dm_expect_count)
                if len(chisquare_obs) < 2:
                    entropydiffs.append(np.nan)
                    pvalues.append(np.nan)
                else:
                    entropydiffs.append(stats.entropy(chisquare_obs) - stats.entropy(chisquare_expect))
                    pvalues.append(stats.chisquare(chisquare_obs, chisquare_expect)[1])
                del chisquare_obs
                del chisquare_expect
            hiAnticodonDF['entropy_diff'] = entropydiffs
            del entropydiffs
            hiAnticodonDF['chi_squared_p'] = pvalues
            del pvalues
            anticodonDF = anticodonDF.join(hiAnticodonDF[['entropy_diff', 'chi_squared_p']])
            del hiAnticodonDF
            rankDFList.append(anticodonDF)
            gc.collect()

        modRankDFDict[m1A_col] = rankDFList

    return modRankDFDict

parser = argparse.ArgumentParser()
# parser.add_argument('dmProfileDB')
parser.add_argument('dmtRNASeqDB')
parser.add_argument('dmGAST')
# parser.add_argument('unProfileDB')
parser.add_argument('untRNASeqDB')
parser.add_argument('unGAST')
parser.add_argument('dataset_name')
parser.add_argument('outdir')
# args = parser.parse_args()

args = parser.parse_args([# '/Users/sammiller/Documents/test4/s10_demethylase_new_PROFILE/PROFILE.db',
                          '/Users/sammiller/Documents/reanalysis/tongue1/02_IDENT/tongue1_day2_demethylase_TRNASEQ.db',
                          '/Users/sammiller/Documents/reanalysis/tongue1/02_IDENT/tongue1_day2_demethylase_UNIQUE_TRNA.gast',
                          # '/Users/sammiller/Documents/test4/s10_untreated_new_PROFILE/PROFILE.db',
                          '/Users/sammiller/Documents/reanalysis/tongue1/02_IDENT/tongue1_day2_untreated_TRNASEQ.db',
                          '/Users/sammiller/Documents/reanalysis/tongue1/02_IDENT/tongue1_day2_untreated_UNIQUE_TRNA.gast',
                          'tongue1_day2',
                          '/Users/sammiller/Documents/reanalysis/tongue1/02_IDENT/'])

dmDF = load_split_df(args.dmtRNASeqDB, args.dmGAST)
unDF = load_split_df(args.untRNASeqDB, args.unGAST)

modRankDFDict = analyze_mods_for_each_taxon_anticodon(dmDF, unDF)
for m1A_col, rankDFList in modRankDFDict.items():
    xlsxOutPath = os.path.join(args.outdir, args.dataset_name + '_' + m1A_col + '_profile.xlsx')
    with pd.ExcelWriter(xlsxOutPath) as writer:
        for rank, rankDF in zip(gast_ranks[:-1], rankDFList):
            rankDF.to_excel(writer, sheet_name=rank, merge_cells=False)
            tsvOutPath = os.path.join(args.outdir, args.dataset_name + '_' + m1A_col + '_' + rank + '_profile.tsv')
            rankDF.to_csv(tsvOutPath, sep='\t')