#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import snakemake

import anvio
import anvio.workflows as w
import anvio.terminal as terminal

from anvio.errors import ConfigError, FilesNPathsError
from anvio.workflows.contigs import ContigsDBWorkflow
from anvio.workflows.metagenomics import MetagenomicsWorkflow
from anvio.workflows.pangenomics import PangenomicsWorkflow


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Alon Shaiber"
__email__ = "alon.shaiber@gmail.com"


run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print

workflows_dict = {'contigs': ContigsDBWorkflow,
                  'metagenomics': MetagenomicsWorkflow,
                  'pangenomics': PangenomicsWorkflow}


def main(args):
    if args.list_workflows:
        run.info("Available workflows", ", ".join(list(workflows_dict.keys())))
        sys.exit(0)

    M = workflows_dict[args.workflow](args)
    M.init()

    # FIXME: Meren and Alon should discuss these next lines
    # we can't call the snakefile from the class so I think
    # we have to do it this way
    if not args.workflow and args.config_file:
        raise ConfigError("You must provide a workflow name AND a config file. You can use --list-workflow\
                           to learn what workflows are available, and you can use --get-default-config\
                           if you need help writing your config file.")
    workflow_dir = w.get_path_to_workflows_dir()
    snakefile = workflow_dir + "/" + args.workflow + "/Snakefile"
    config_file = args.config_file
    # Check that the config file is good
    M.check_config()

    if args.list_dependencies:
        sys.argv = ['snakemake', '-s', snakefile, '--configfile', config_file, '-np']
        snakemake.main()
        sys.exit(0)

    # snakemake.main() accepts an `argv` parameter, but then the code has mixed responses to
    # that, and at places continues to read from sys.argv in a hardcoded manner. so we have to
    # overwrite our argv here.
    sys.argv = ['snakemake', '-s', snakefile, '--configfile', os.path.abspath(config_file), '-p']
    snakemake.main()


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="")
    # FIXME: delete the following line later
    input_args = ["workflow", "config", "additional-cmd", "list-workflows"]
    groupA = parser.add_argument_group('ESSENTIAL INPUTS', "Things you must provide or this won't work")
    groupA.add_argument(*anvio.A("workflow"), **anvio.K("workflow"))

    groupB = parser.add_argument_group('ADDITIONAL STUFF', "additional stuff")
    groupB.add_argument(*anvio.A("list-workflows"), **anvio.K("list-workflows"))
    groupB.add_argument(*anvio.A("get-default-config"), **anvio.K("get-default-config"))
    groupB.add_argument(*anvio.A("list-dependencies"), **anvio.K("list-dependencies"))
    groupB.add_argument(*anvio.A("config-file"), **anvio.K("config-file"))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
