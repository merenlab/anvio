#!/usr/bin/env python
# -*- coding: utf-8
"""tRNA-seq data analysis workflow"""

import sys

import anvio
import anvio.trnaseq as trnaseq
import anvio.trnaidentifier as trnaidentifier

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Samuel Miller"
__email__ = "samuelmiller10@gmail.com"
__provides__ = ['trnaseq-db']
__description__ = ("An anvi'o script to process a tRNA-seq dataset, generating a tRNA-seq database.")


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=__description__)

    group1A = parser.add_argument_group('MANDATORY')
    group1A.add_argument(*anvio.A('fasta-file'),
                        **anvio.K('fasta-file',
                                  {'help': "A FASTA file of tRNA-seq reads. "
                                   "tRNA-seq chemistry works from the 3' acceptor (CCA) end of the tRNA molecule, "
                                   "extending in the 5' direction."}))
    group1A.add_argument(*anvio.A('project-name'), **anvio.K('project-name'))
    group1A.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir'))

    group1B = parser.add_argument_group('MUNDANE')
    group1B.add_argument(*anvio.A('overwrite-output-destinations'), **anvio.K('overwrite-output-destinations'))
    group1B.add_argument(*anvio.A('description'), **anvio.K('description'))

    group1C = parser.add_argument_group('PERFORMANCE')
    group1C.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    group1C.add_argument(*anvio.A('skip-fasta-check'), **anvio.K('skip-fasta-check'))
    group1C.add_argument(*anvio.A('write-checkpoints'), **anvio.K('write-checkpoints'))
    group1C.add_argument(*anvio.A('load-checkpoint'), **anvio.K('load-checkpoint'))
    group1C.add_argument(*anvio.A('write-buffer-size'),
                        **anvio.K('write-buffer-size',
                                  {'default': 100000,
                                  'help': "The number of tRNA feature profiles to be kept in memory before writing to the tRNA-seq database. "
                                          "The default is 100,000. The larger the buffer size, the less frequently the program will access the disk, "
                                          "yet the more memory will be consumed, as profiles are cleared from memory once processed. "
                                          "Keep an eye on python memory usage to make sure it never exceeds the physical memory limit."}))
    group1C.add_argument(*anvio.A('alignment-target-chunk-size'), **anvio.K('alignment-target-chunk-size'))
    group1C.add_argument(*anvio.A('fragment-mapping-query-chunk-length'), **anvio.K('fragment-mapping-query-chunk-length'))

    group1D = parser.add_argument_group('ADVANCED')
    group1D.add_argument(*anvio.A('feature-param-file'), **anvio.K('feature-param-file'))
    group1D.add_argument(*anvio.A('min-length-long-fiveprime'), **anvio.K('min-length-long-fiveprime'))
    group1D.add_argument(*anvio.A('min-trna-fragment-size'), **anvio.K('min-trna-fragment-size'))
    group1D.add_argument(*anvio.A('agglomeration-max-mismatch-freq'), **anvio.K('agglomeration-max-mismatch-freq'))
    group1D.add_argument(*anvio.A('max-deletion-size'), **anvio.K('max-deletion-size'))

    group1E = parser.add_argument_group('MINUTIAE')
    group1E.add_argument(*anvio.A('alignment-progress-interval'), **anvio.K('alignment-progress-interval'))
    group1E.add_argument(*anvio.A('agglomeration-progress-interval'), **anvio.K('agglomeration-progress-interval'))

    group2 = parser.add_argument_group('DEFAULTS')
    group2.add_argument(*anvio.A('default-feature-param-file'), **anvio.K('default-feature-param-file'))
    group2.add_argument(*anvio.A('print-default-feature-params'), **anvio.K('print-default-feature-params'))

    args = anvio.get_args(parser)
    try:
        if args.default_feature_param_file:
            trnaidentifier.TRNAFeature.write_param_file(args.default_feature_param_file)
        elif args.print_default_feature_params:
            print(trnaidentifier.TRNAFeature.tabulate_params())
        else:
            trnaseq_dataset = trnaseq.TRNASeqDataset(args)
            trnaseq_dataset.process()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
