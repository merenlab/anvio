#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import copy
import argparse
import shutil

import anvio
import anvio.db as db
import anvio.tables as t
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError
from anvio.migrations import migration_scripts

__description__ = "Migrate an anvi'o database or config file to a newer version"

run = terminal.Run()
progress = terminal.Progress()


class Migrater(object):
    def __init__(self, args):
        self.args = args
        self.db_path = args.db_path
        self.db_type = None
        self.db_version = None
        self.target_version = None

        filesnpaths.is_file_exists(self.db_path)
        self.get_db_meta()
        self.get_target_version()

        if not args.migrate_dbs_safely and not args.migrate_dbs_quickly:
            raise ConfigError("You must choose either `--migrate-dbs-safely` or `--migrate-dbs-quickly`. Anvi'o would "
                              "have chosen one for you, but our lawyers suggested that it may put our life savings in "
                              "jeopardy.")

        if args.migrate_dbs_safely and args.migrate_dbs_quickly:
            raise ConfigError("Please don't ask anvi'o to migrate your databases both safely and quickly :/")

        self.safe_mode = args.migrate_dbs_safely

        try:
            self.sqlite_version = utils.get_command_output_from_shell("sqlite3 --version")[0].decode("utf-8").split(' ')[0].split('.')
        except:
            self.sqlite_version = None

        run.info('Database Path', self.db_path)
        run.info('Detected Type', self.db_type)
        run.info('Current Version', self.db_version)
        run.info('Target Version', self.target_version)

        if args.migrate_dbs_safely:
           run.info('Migration mode', "Safe", mc="green")
        else:
           run.info('Migration mode', "Adventurous", mc="red")

        run.info('SQLite Version', '.'.join(self.sqlite_version) if self.sqlite_version else 'Unknown :/', nl_after=1, nl_before=1)

        if not (int(self.sqlite_version[0]) >= 3 and int(self.sqlite_version[1]) >= 30):
            if not args.just_do_it:
                raise ConfigError("Anvi'o migration tool requires the installed SQLite version to be at least "
                                  "v3.30.0. Yours seem to be %s (if this doesn't make any sense, you can take "
                                  "a look at the output of the command 'sqlite3 --version' on your terminal). "
                                  "You can skip this check if you use the argument `--just-do-it` with your "
                                  "command. In which case we strongly recommend you to use `--migrate-dbs-safely` "
                                  "flag since it will be likely for you to lose your database if something goes "
                                  "wrong downstream." % '.'.join(self.sqlite_version) if self.sqlite_version else 'Unknown :/')
            else:
                run.warning("Anvi'o is skipping the version number check for SQLite. Brace yourself for impact?")


    def get_db_meta(self):
        if not args.just_do_it and self.db_path.split('.')[-1] not in ['db', 'h5', 'json']:
            raise ConfigError("This program only works with files that end with `.db` or `.json` extensions. "
                              "But if you sure that, this is in fact an anvi'o database or config file "
                              "you can use --just-do-it flag at your own risk.")

        file_is_config = False
        if args.just_do_it:
            # check if this a config file by checking if it is a JSON formatted file
            try:
                filesnpaths.is_file_json_formatted(self.db_path)
                file_is_config = True
            except:
                pass

        try:
            if self.db_path.endswith('GENOMES.h5'):
                utils.check_h5py_module()
                import h5py
                fp = h5py.File(self.db_path, 'r')

                self.db_type = 'genomestorage'
                self.db_version = int(fp.attrs['version'])

                fp.close()
            elif self.db_path.endswith('json') or file_is_config:
                import anvio.workflows as w
                self.db_type = 'config'
                workflow_name, config_version = w.get_workflow_name_and_version_from_config(self.db_path, dont_raise=True)
                self.db_version = int(config_version)
            else:
                db_conn = db.DB(self.db_path, None, ignore_version=True)

                self.db_type = db_conn.get_meta_value('db_type')
                self.db_version = int(db_conn.get_meta_value('version'))

                db_conn.disconnect()
        except:
            raise ConfigError('Are you sure "%s" is a database or config file? Because, you know, probably '
                               'it is not at all.' % self.db_path)


    def get_target_version(self):
        if self.db_type in t.versions_for_db_types:
            version = int(t.versions_for_db_types[self.db_type])
        else:
            raise ConfigError("Anvi'o does not have any version information about this ('%s') database type" % self.db_type)

        if args.target_version:
            target = int(args.target_version)

            if target <= self.db_version:
                raise ConfigError("Target version ('%s') can not be lower than db version ('%s')." % (target, self.db_version))
            elif target > version:
                raise ConfigError("Target version ('%s') can not be higher than highest available version ('%s') for this type." % (target, version))

            version = target

        self.target_version = int(version)


    def process(self):
        tasks = []


        # if we are in safe mode, we will first copy the db
        if self.safe_mode:
            progress.new("Migration preparation")
            progress.update("Copying the original db for safety ...")
            temp_file_path = filesnpaths.get_temp_file_path() + '.db'
            shutil.copy(self.db_path, temp_file_path)
            progress.end()
        else:
            temp_file_path = None

        for i in range(self.db_version, self.target_version):
            script_name = "v%s_to_v%s" % (i, i + 1)

            if not self.db_type in migration_scripts or not script_name in migration_scripts[self.db_type]:
                raise ConfigError("Anvi'o can not find a migrate script required "
                   "for this operation. (DB Type: %s, Script name: %s) " % (self.db_type, script_name))

            tasks.append(script_name)

        for script_name in tasks:
            try:
                migration_scripts[self.db_type][script_name].migrate(self.db_path)
            except Exception as e:
                if temp_file_path:
                    shutil.move(self.db_path, self.db_path + '.broken')
                    shutil.copy(temp_file_path, self.db_path)
                    os.remove(temp_file_path)

                    progress.reset()
                    raise ConfigError("Something went wrong during the migration of your database :( But anvi'o was able to restore your "
                                      "original database, and stored the unfinished upgrade in the same directory with the '.broken' "
                                      "in case you may need it for debugging purposes. Please feel free to get in touch with the "
                                      "developers, who may ask you to make available the original database to reproduce the problem. This "
                                      "was the original error message that caused this: '%s'." % e)
                else:
                    progress.reset()

                    shutil.move(self.db_path, self.db_path + '.broken')

                    raise ConfigError("Anvi'o has very bad news for you :( Your migration failed, and anvi'o has no backups to restore your "
                                      "original database. The current database is likely in a broken state, and you will unlkely going to be "
                                      "able to use it. So anvi'o renamed it by adding a prefix '.broken' to its file name. We are very sorry "
                                      "for this error (and anvi'o will certainly not put salt on the wound by reminding you that you could "
                                      "have avoided it by using the `--migrate-dbs-safely` flag): \"%s\"." % e)

                    print(e)
                    sys.exit(-1)

            # special cases #
            # after this script is done, genome storage changes extension from .h5 to .db
            if self.db_type == 'genomestorage' and script_name == 'v4_to_v5':
                self.db_path = self.db_path[:-3] + '.db'

        if self.safe_mode:
            progress.new("Post migration")
            progress.update("Removing the backup db ...")
            os.remove(temp_file_path)
            progress.end()
        else:
            temp_file_path = None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUTS', "You will literally give us any anvi'o database.")
    groupA.add_argument('input', metavar = 'DATABASE(S)', nargs='+', help = "Anvi'o database or config file for migration. You "
                                                        "can give many of them all at once. Running `anvi-migrate *.db` "
                                                        "in a directory will migrate all databases in that directory.")

    groupB = parser.add_argument_group('SAFETY', "It is up to you. Safe things take much longer and boring. Unsafe things "
                                                 "are fast, fun, and .. well, don't come to use if your computer loses power "
                                                 "or somiething.")
    groupB.add_argument(*anvio.A('migrate-dbs-safely'), **anvio.K('migrate-dbs-safely'))
    groupB.add_argument(*anvio.A('migrate-dbs-quickly'), **anvio.K('migrate-dbs-quickly'))

    groupC = parser.add_argument_group('PARAMATERS OF CONVENIENCE', "This is how anvi'o spoils you.")
    groupC.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))
    groupC.add_argument(*anvio.A('target-version'), **anvio.K('target-version'))
    args, unknown = parser.parse_known_args()

    try:
        if len(args.input) > 1 and args.target_version:
            raise ConfigError("You have to provide single database to use --target-version parameter. You have provided %d databases." % len(args.input))

        for db_path in args.input:
            args_for_single_db = copy.deepcopy(args)
            args_for_single_db.db_path = db_path

            Migrater(args_for_single_db).process()

            print("") # put little gap
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
