#!/usr/bin/env python
# -*- coding: utf-8
import sys
import argparse

import anvio
import anvio.dgrs as dgrs
import anvio.terminal as terminal

with terminal.SuppressAllOutput():
    import anvio.data.hmm as hmm_data

available_hmm_sources = list(hmm_data.sources.keys())

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program, Run

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2024, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ["katysloz"]
__requires__ = ["fasta", "contigs-db", 'profile-db']
__provides__ = []
__description__ = "A program designed to find Diversity Generating Retroelements based on nucleotide similarity"

run = Run()

@time_program
def main(args):

    if args.hmm_usage:
        args.hmm_usage = [p.strip() for p in args.hmm_usage.split(',') if p.strip()]

    D = dgrs.DGR_Finder(args)
    D.process(args)
    #blast_output = D.get_blast_results()
    #mismatch_hits = D.filter_blastn_for_none_identical(blast_output)
    #DGRs_found_dict = D.filter_for_TR_VR(mismatch_hits)
    #DGRs_found_dict = D.get_hmm_info(DGRs_found_dict)
    #csv_file_path = D.create_found_tr_vr_csv(DGRs_found_dict)

#call function here for filtering hits of blast from root
def float_range(mini,maxi):
    """Return function handle of an argument type function for
        ArgumentParser checking a float range: mini <= arg <= maxi
        mini - minimum acceptable argument
        maxi - maximum acceptable argument"""

    # Define the function with default arguments
    def float_range_checker(arg):
        """New Type function for argparse - a float within predefined range."""

        try:
            f = float(arg)
        except ValueError:
            raise argparse.ArgumentTypeError("must be a decimal number")
        if f < mini or f > maxi:
            raise argparse.ArgumentTypeError("must be in range [" + str(mini) + "-" + str(maxi)+"]")
        return f

    # Return function handle to checking function
    return float_range_checker

my_float_range= float_range(0.5,1.0)

if __name__ == '__main__':
    available_hmm_sources_pretty = '; '.join([f"'{s}' (type: {hmm_data.sources[s]['kind']})" for s in available_hmm_sources])
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)
    groupA = parser.add_argument_group('INPUT DATA', "Three options with varying outputs. 1. fasta file nothing else. 2. Contigs.db. 3. Contigs.db AND Profile.db. "
                                        "option 1 and 2 Search for DGRs in whatever you have given it. Option 3. Searches based on areas of high SNV")
    groupA.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    groupA.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False})) #ADD THAT HAS TO BE MERGED_DB, unless have
    groupA.add_argument("-i", "--input-file", required=False, help=("Genome sequence file, with multiple or singular sequence/s, or really any fasta file with sequences."))

    groupB = parser.add_argument_group('BLASTN ARGUMENTS', "BLASTn parameters for initial Template and Variable Region search")
    groupB.add_argument("--step", help="Length of base pairs you would like to cut your genome/sequence into", type=int, default=100)
    groupB.add_argument("--word-size", help="BLASTn word size parameter", type=str, default=8)

    groupC = parser.add_argument_group('LOCATING VR OPTIONS', "Options for the fine tuning this progra's location of variable regions'")
    groupC.add_argument("--skip-Ns", help="Skip 'N' bases when searching for mismatches", action = 'store_true', default=True)
    groupC.add_argument("--skip-dashes", help="Skip '-' bases when searching for mismatches", action = 'store_true',default=True)
    groupC.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupC.add_argument(*anvio.A('gene-caller'), **anvio.K('gene-caller', {'help': "The gene caller to show gene calls if you are using a contigs.db. This is used to tell the program"
                                                                            "that you want to find the genes that your Variable Regions occured in."}))
    groupC.add_argument("--discovery-mode", help="By default, anvi'o uses SNVs occuring in the first and second codon position of ORF to identify DGRs. "
                        "This constraint allows for a fast search and more reliable results. If you feel daring, you can use this flag and let anvi'o use "
                        "ANY SNVs to identify regions of interest for the VR/TR search.", action = "store_true", default=False)
    groupC.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    groupD = parser.add_argument_group('FILTER BLAST FOR TR/VRS', "Parameters for refining how stringent your search for template and variable regions is")
    groupD.add_argument("-m","--percentage-mismatch", help="The percentage of mismatching bases in the template region that are one 'type' of base. Has to be between 0.5 and 1.00", type=my_float_range, default=0.8)
    groupD.add_argument("-n","--number-of-mismatches", help="Number of one 'type' of base in the template region that is mismatching to the variable region sequence", type=int, default=7)
    groupD.add_argument("--min-mismatching-base-types-vr", help="The minimum number of mismatching base 'types' in the variable region, to ensure the variable region has multiple bases present. Has to be an integer between 1 and 4. (NB if 1 then has no variety in the mismatching bases)", type=int, default=2)

    groupE = parser.add_argument_group('CONTIGS AND PROFILE DB INPUT ARGUMENTS', "Options for using the Contigs.db and Profile.db input for this program")
    groupE.add_argument("-s","--distance-between-snv", help="Length of bp between SNVs for them to be added to the high SNV density window ", type=int, default=5)
    groupE.add_argument("-r","--minimum-range-size", help="Minimum length of SNVs window", type=int, default=5)
    groupE.add_argument("--variable-buffer-length", help="Length of bp added to your high SNV density 'window'", type=int, default=20)
    groupE.add_argument("-d","--departure-from-reference-percentage", help="Minimum departure from reference to consider a SNV. Default is 0.1", type=float, default=0.1)
    groupE.add_argument("-I","--hmm-usage", required = True, help="The name of the HMM run with your Contigs.db, ideally the 'Reverse_Transcriptase' HMM, or your own HMM of reverse transcriptases "
                        "(type: 6 clades of DGR Retroelements from doi.org/10.1038/s41467-021-23402-7 including other known reverse transcriptases). You can "
                        "provide a comma-separated list of names for multiple profiles (but in that case don't put a space between each profile name). As a "
                        f"reminder here is the list of anvi'o installed profiles available to you: {available_hmm_sources_pretty}. This option is mandatory "
                        "for reporting DGRs, however anvi'o does not want to tell you what to do, so please proceed",type=str, default = None)

    groupF = parser.add_argument_group('OUTPUT DIRECTORY', "Where to put all the output files.")
    groupF.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir'))
    groupF.add_argument("--parameter-output", help="Add this flag if you want to output the parameters and their values you have input in a csv file", action="store_true")
    groupF.add_argument(*anvio.A('overwrite-output-destinations'), **anvio.K('overwrite-output-destinations'))

    groupG = parser.add_argument_group('METAGENOMICS MODE', "Options for which metagenomics mode to use.")
    groupG.add_argument("--metagenomics-contigs-mode", help="The flag to use that searches through specified splits that are in the collection that is specificed with the '-C / --collection' flag.", action = "store_true")
    groupG.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name', {'help':"The name of the collection that you want to search for DGRs in"}))

    args = parser.get_args(parser)


    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
