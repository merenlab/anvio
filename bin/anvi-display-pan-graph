#!/usr/bin/env python
# -*- coding: utf-8

import sys
from anvio.argparse import ArgumentParser

import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.interactive as interactive
from anvio.bottleroutes import BottleApplication

from anvio.errors import ConfigError, FilesNPathsError, DictIOError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ahenoch']
__requires__ = ['pan-graph-json']
__provides__ = ['interactive', 'svg']
__description__ = "Start an anvi'o interactive interface to view pan graphs."

run = terminal.Run()
progress = terminal.Progress()

if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)
    groupA = parser.add_argument_group('PRIMARY INPUT', "Specify where your pan-db is.")
    groupA.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False}))
    groupA.add_argument(*anvio.A('genomes-storage'), **anvio.K('genomes-storage', {'required': False}))

    groupB = parser.add_argument_group('OPTIONAL INPUT', "By default, this program will read the pan graph data from the pan-db tables. However, "
                                "you can also provide it with a JSON file that you have generated previously, in which case the program will skip "
                                "attempting to read anything from the pan-db and will use the input file to initialize an interface.")
    groupB.add_argument(*anvio.A('pan-graph-json'), **anvio.K('pan-graph-json'))
    
    groupC = parser.add_argument_group('SERVER CONFIGURATION', "For power users.")
    groupC.add_argument(*anvio.A('dry-run'), **anvio.K('dry-run'))
    groupC.add_argument(*anvio.A('ip-address'), **anvio.K('ip-address'))
    groupC.add_argument(*anvio.A('port-number'), **anvio.K('port-number'))
    groupC.add_argument(*anvio.A('browser-path'), **anvio.K('browser-path'))
    groupC.add_argument(*anvio.A('server-only'), **anvio.K('server-only'))
    groupC.add_argument(*anvio.A('password-protected'), **anvio.K('password-protected'))

    args = parser.get_args(parser)

    try:
        d = interactive.PangraphInteractive(args, run=run, progress=progress)

        if args.dry_run:
            run.info_single('Dry run, eh? Fine. Bai!', nl_after=1)
            sys.exit()

        args.mode = 'pangraph'
        port_number = utils.get_port_num(args.port_number, args.ip_address, run=run)

        app = BottleApplication(d)
        app.run_application(args.ip_address, port_number)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
    except DictIOError as e:
        print(e)
        sys.exit(-3)
