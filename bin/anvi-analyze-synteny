#!/usr/bin/env python
# -*- coding: utf-8
"""anvi-analyze-synteny ... lets extract some order from this chaos!


The goal of this program is to analyze the synteny patters within a group of loci. The main idea is to have a sliding window 
that will record a set of genes of size N to form an Ngram (similar to a kmer profile). This program will output
a .tsv with counts for each ngram per contig provided. The resulting Ngram count table can then be used 
to n analyze as a network to see the presence and absence of groups of genes by the user.

To test this code run:

            >>> ./run_pangenome_tests.sh
            >>> cd anvio/anvio/tests/sandbox/test-output/pan_test
            >>> anvi-analyze-synteny -e external-genomes.txt  \
                                     --annotation-source COG_FUNCTION \
                                     --window-size 3 \
                                     -o test

        Default test that ignores ngrams with unknown functions:

            >>> anvi-analyze-synteny -e external-genomes-cps.txt \
                                     --annotation-source COG_FUNCTION \
                                     --window-size 2:3 \
                                     -o test 

        Unknown-function-mode test that records ngrams with unknown functions:

            >>> anvi-analyze-synteny -e external-genomes-cps.txt \
                                     --annotation-source COG_FUNCTION \
                                     --window-range 2:3 \
                                     -o tsv \
                                     --analyze-unknown-functions

"""

import sys
import argparse

import anvio
import anvio.terminal as terminal

from anvio.synteny import NGram
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"
__requires__ = ['contigs-db']
__provides__ = ['locus-fasta']
__description__ = ("This program helps you extract synteny patterns from a group of similar loci. This "
                   "is accomplished by deconstructing loci into Ngrams (group of neighboring genes of which N is the number of genes) of gene "
                   "functions using a sliding window method. Once completed, anvi'o will export a table with Ngrams counts "
                   "for you to work with. By default anvi'o will ignore Ngrams that contain genes without annotations. If "
                   "you would like to override this, you can use the -- analyze-unknown-functions flag.")



run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    # Essential input
    groupA = parser.add_argument_group('Essential INPUT')
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes', {"required": True}))
    groupA.add_argument(*anvio.A('annotation-source'), **anvio.K('annotation-source', {"required": True}))
    groupA.add_argument(*anvio.A('window-range'), **anvio.K('window-range', {"required": True}))
    groupA.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {"required": True}))
    groupB = parser.add_argument_group('Additonal INPUT')
    groupB.add_argument('--analyze-unknown-functions',action="store_true",
                        help="TRUE indicates that you would like anvi-analyze-synteny to take into accounts\
                        gene calls that do not have an annotation. FALSE indicates that anvi-export locus\
                        will ignore any ngram with an unknown function in it.")

    args = anvio.get_args(parser)

    try:
        ngram = NGram(args)
        ngram.populate_genes()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
