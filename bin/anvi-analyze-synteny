#!/usr/bin/env python
# -*- coding: utf-8
"""anvi-analyze-synteny ... lets extract some order from this chaos!


The goal of this program is to analyze the synteny patters within a group of loci. The main idea is to have a sliding window 
that will record a set a genes in a matrix (similar to a kmer profile) which we can then analyze as a network to see the 
presence and absence of groups of genes.

"""

import sys
import argparse

import anvio
import anvio.terminal as terminal

from anvio.synteny import NGram
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"
__requires__ = ['contigs-db']
__provides__ = ['locus-fasta']
__description__ = ("This program lets you analyze a group of similar loci to extract patters of groups of genes")



run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    # Essential input
    groupA = parser.add_argument_group('Essential INPUT')
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes', {"required": True}))
    groupA.add_argument(*anvio.A('annotation-source'), **anvio.K('annotation-source', {"required": True}))
    groupA.add_argument(*anvio.A('window-size'), **anvio.K('window-size', {"required": True}))
    groupA.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {"required": True}))

    # Essential input
    # groupA = parser.add_argument_group('Essential INPUT')
    # groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes', {"required": True}))
    # groupA.add_argument(*anvio.A('annotation-source'), **anvio.K('annotation-source', {"required": True}))
    # groupA.add_argument(*anvio.A('window-size'), **anvio.K('window-size', {"required": True}))
    # # Essential input
    # groupA = parser.add_argument_group('Essential INPUT')
    # groupA.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))

    args = anvio.get_args(parser)

    try:
        ngram = NGram(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
