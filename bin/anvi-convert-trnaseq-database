#!/usr/bin/env python
# -*- coding: utf-8

import sys

import anvio
import anvio.trnaseq as trnaseq

from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Samuel Miller"
__email__ = "samuelmiller10@gmail.com"
__requires__ = ['trnaseq-db']
__provides__ = ['contigs-db', 'profile-db']
__description__ = ("This program extracts tRNA seed sequences "
                   "from one or more anvi'o tRNA-seq databases generated by `anvi-trnaseq`. "
                   "Simultaneously, the program finds coverage profiles and calls tRNA modification sites. "
                   "Seeds are stored in an anvi'o contigs database, "
                   "while coverage, deletion, modification and associated data are stored in a merged anvi'o profile database."
                   "Seeds are meant to represent distinct tRNA sequences, so they should not contain SNVs, "
                   "and predicted modifications take over the existing SNV infrastructure in the profile database.")


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('MANDATORY')
    groupA.add_argument('input', metavar='TRNASEQ_DB(S)', nargs='+',
                        help="Anvi'o tRNA-seq databases representing samples in an experiment")
    groupA.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir'))
    groupA.add_argument(*anvio.A('project-name'), **anvio.K('project-name'))

    groupB = parser.add_argument_group('EXTRAS')
    groupB.add_argument(*anvio.A('max-reported-trna-seeds'), **anvio.K('max-reported-trna-seeds'))
    groupB.add_argument(*anvio.A('overwrite-output-destinations'), **anvio.K('overwrite-output-destinations'))
    groupB.add_argument(*anvio.A('description'), **anvio.K('description'))

    groupC = parser.add_argument_group('ADVANCED')
    groupC.add_argument(*anvio.A('feature-threshold'), **anvio.K('feature-threshold'))
    groupC.add_argument(*anvio.A('preferred-treatment'), **anvio.K('preferred-treatment'))
    groupC.add_argument(*anvio.A('nonspecific-output'), **anvio.K('nonspecific-output'))
    groupC.add_argument(*anvio.A('min-variation'), **anvio.K('min-variation'))
    groupC.add_argument(*anvio.A('min-third-fourth-nt'), **anvio.K('min-third-fourth-nt'))
    groupC.add_argument(*anvio.A('min-del-fraction'), **anvio.K('min-del-fraction'))
    groupC.add_argument(*anvio.A('distance'), **anvio.K('distance'))
    groupC.add_argument(*anvio.A('linkage'), **anvio.K('linkage'))

    args = parser.get_args(parser)
    try:
        converter = trnaseq.DatabaseConverter(args)
        converter.process()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
