#!/usr/bin/env python
# -*- coding: utf-8

import sys

import anvio
import anvio.scgtaxonomyops as scgtaxonomyops
import anvio.terminal as terminal

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Quentin Clayssen"
__email__ = "quentin.clayssen@gmail.com"
__requires__ = ['profile-db', 'contigs-db', 'scgs-taxonomy', 'collection', 'bin']
__provides__ = ['genome-taxonomy', 'genome-taxonomy-txt']
__resources__ = [("Usage examples and warnings", "http://merenlab.org/scg-taxonomy")]
__description__ = ("Estimates taxonomy at genome and metagenome level. This program is the entry point to"
                   "estimate taxonomy for a given set of contigs (i.e., all contigs in a contigs database,"
                   "or contigs described in collections as bins). For this, it uses single-copy core"
                   "gene sequences and the GTDB database.")


run = terminal.Run()
progress = terminal.Progress()


@terminal.time_program
def main(args):
    t = scgtaxonomyops.SCGTaxonomyEstimator(args)
    t.estimate()


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT #1', "The minimum you must provide this program is a contigs database. In which case\
                                                    anvi'o will attempt to estimate taxonomy for all contigs in it, assuming that\
                                                    the contigs database represents a single genome. If the contigs database is actually\
                                                    a metagenome, you should use the `--metagenome` flag to excplicitly declare that.")
    groupA.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': True}))
    groupA.add_argument(*anvio.A('metagenome-mode'), **anvio.K('metagenome-mode'))

    groupB = parser.add_argument_group('INPUT #2', "In addition, you can also point out a profile databse. In which case you also must\
                                                    provide a collection name. When you do that anvi'o will offer taxonomy estimates for\
                                                    each bin in your collection. You can also limit those estimates to a single bin using\
                                                    the parameters `--bin-id` or `--bin-ids-file`.")
    groupB.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    groupB.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    groupB.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    groupB.add_argument(*anvio.A('bin-ids-file'), **anvio.K('bin-ids-file'))

    groupC = parser.add_argument_group('OUTPUT', "Anvi'o will offer you table for your viewing pleasure by default. In addition to that,\
                                                  you can ask the information it produces to be stored in a TAB-delimited file (which is\
                                                  a better way to go about it if you wish to add it to your study as supplementary information).")
    groupC.add_argument(*anvio.A('output-file'), **anvio.K('output-file'))

    groupD = parser.add_argument_group('PERFORMANCE', "We are not sure if allocating more threads for this operation will change anything.\
                                                       But hey. One can try.")
    groupD.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))

    groupD = parser.add_argument_group('AUTHORITY', "Assert your dominance.")
    groupD.add_argument(*anvio.A('scg-name-for-metagenome-mode'), **anvio.K('scg-name-for-metagenome-mode'))
    groupD.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    groupE = parser.add_argument_group('ADVANCED', "Very pro-like stuff.")
    groupE.add_argument(*anvio.A('simplify-taxonomy-information'), **anvio.K('simplify-taxonomy-information'))
    groupE.add_argument(*anvio.A('compute-scg-coverages'), **anvio.K('compute-scg-coverages'))
    groupE.add_argument(*anvio.A('update-profile-db-with-taxonomy'), **anvio.K('update-profile-db-with-taxonomy'))

    groupF = parser.add_argument_group('BORING', "Options that you will likely never need.")
    groupF.add_argument(*anvio.A('taxonomy-database'), **anvio.K('taxonomy-database'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
