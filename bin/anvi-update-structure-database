#!/usr/bin/env python
# -*- coding: utf-8

import sys
import anvio
import argparse

import anvio.terminal as terminal
import anvio.structureops as structops

from anvio.errors import ConfigError, FilesNPathsError, ModellerError


__author__ = "A. Murat Eren"
__copyright__ = "Copyright 2015, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"
__description__ = ("Add or remove genes from an already existing structure database. All settings used "
                   "to generate your database will be used in this program.")


run = terminal.Run()
progress = terminal.Progress()


# FIXME if you're seeing this class in master please yell at Evan
class StructureUpdate(Structure):
    def __init__(self, args, run=terminal.Run(), progress=terminal.Progress()):
        self.args = args
        self.run = run
        self.progress = progress

        # initialize self.arg parameters
        A = lambda x, t: t(args.__dict__[x]) if x in self.args.__dict__ else None
        null = lambda x: x
        self.contigs_db_path = A('contigs_db', null)
        self.structure_db_path = A('structure_db', null)
        self.genes_to_remove = A('genes_to_remove', null)
        self.genes_to_remove_path = A('genes_to_remove_file', null)
        self.genes_to_add = A('genes_to_add', null)
        self.genes_to_add_path = A('genes_to_add_file', null)
        self.full_modeller_output = A('dump_dir', null)
        self.modeller_executable = A('modeller_executable', null)
        self.skip_genes_if_already_present = A('skip_genes_if_already_present', bool)
        self.DSSP_executable = None

        utils.is_contigs_db(self.contigs_db_path)
        self.contigs_db = dbops.ContigsDatabase(self.contigs_db_path)
        self.contigs_db_hash = self.contigs_db.meta['contigs_db_hash']
        self.structure_db_path = self.structure_db_path

        # init ContigsSuperClass
        self.contigs_super = ContigsSuperclass(self.args)

        if not any([self.genes_to_remove, self.genes_to_remove_path, self.genes_to_add, self.genes_to_add_path]):
            raise ConfigError("Please specify some genes to add or remove to your database.")

        if self.genes_to_remove and self.genes_to_remove_path:
            raise ConfigError("Provide either --genes-to-remove or --genes-to-remove-path. You provided both.")

        if self.genes_to_add and self.genes_to_add_path:
            raise ConfigError("Provide either --genes-to-add or --genes-to-add-path. You provided both.")

        if self.genes_to_remove or self.genes_to_remove_path:
            self.run.warning("Removing genes...", header="Updating %s" % self.structure_db_path, lc='green')
            self.load_structure_db()
            remove = self.parse_genes(self.genes_to_remove, self.genes_to_remove_path)
            self.remove_genes(remove)
            self.structure_db.disconnect()

        if self.genes_to_add or self.genes_to_add_path:
            self.run.warning("Adding genes...", header="Updating %s" % self.structure_db_path, lc='green')
            self.load_structure_db()
            self.add_genes()


    def load_structure_db(self):
        utils.is_structure_db(self.structure_db_path)
        self.structure_db = StructureDatabase(self.structure_db_path,
                                              self.contigs_db_hash,
                                              create_new=False)

    def add_genes(self):
        # identify which genes user wants to model structures for
        self.genes_of_interest = self.get_genes_of_interest(self.genes_to_add_path, self.genes_to_add)

        if self.skip_genes_if_already_present:
            redundant_gene_caller_ids = [g for g in self.genes_of_interest if g in self.structure_db.genes_queried]
            if redundant_gene_caller_ids:
                self.run.info("Redundant gene caller ids that will be skipped", ",".join([str(x) for x in redundant_gene_caller_ids]))
                self.genes_of_interest = [g for g in self.genes_of_interest if g not in redundant_gene_caller_ids]
                if not self.genes_of_interest:
                    raise ConfigError("Every gene you wanted to add is already in the database. Since you provided "
                                      "the --skip-genes-if-already-present flag, there is nothing to do :)")

        self.run.info("Gene caller ids to be added", ",".join([str(x) for x in self.genes_of_interest]))

        self.get_MODELLER_params_used_when_db_was_created()

        self.sanity_check_for_adding_genes()

        # residue annotation
        self.residue_annotation_sources_info = self.get_residue_annotation_sources_info()
        self.residue_annotation_df = pd.DataFrame({})

        if self.full_modeller_output:
            self.full_modeller_output = filesnpaths.check_output_directory(self.full_modeller_output, ok_if_exists=True)

        self.process()
        self.run.info_single("Anvi'o attempted to add the requested genes. The above log can inform you which were successful.", nl_after=1, nl_before=1)


    def remove_genes(self, remove):
        self.progress.new("Removing genes from structure database")

        bad_ids = [x for x in remove if x not in self.structure_db.genes_queried]
        if len(bad_ids):
            if len(bad_ids) == len(remove):
                self.run.warning("All of the gene caller IDs you asked to remove are missing from "
                                 "the structure database, so there's no genes to remove. Here they "
                                 "are: [{}]. Anvi'o's trust in you decreases significantly."\
                                      .format(",".join([str(x) for x in bad_ids])))
                self.progress.end()
                return

            self.run.warning("Some of the gene caller ids you asked to remove aren't in the "
                             "structure database. Here they are: [{}].".format(",".join([str(x) for x in bad_ids])))

        remove = set([x for x in remove if x not in bad_ids])

        if remove == set(self.structure_db.genes_queried):
            raise ConfigError("You want to remove every gene in your structure database. No.")

        self.run.info("Gene caller ids to be removed", ",".join([str(x) for x in remove]))

        # remove ids from the three meta-keys in which they can appear
        new_genes_queried = [x for x in self.structure_db.genes_queried if x not in remove]
        self.structure_db.db.update_meta_value('genes_queried', ",".join([str(x) for x in new_genes_queried]))

        new_genes_with_structure = [x for x in self.structure_db.genes_with_structure if x not in remove]
        self.structure_db.db.update_meta_value('genes_with_structure', ",".join([str(x) for x in new_genes_with_structure]))

        new_genes_without_structure = [x for x in self.structure_db.genes_without_structure if x not in remove]
        self.structure_db.db.update_meta_value('genes_without_structure', ",".join([str(x) for x in new_genes_without_structure]))

        # remove all rows of tables in which corrresponding_gene_call matches the ids to remove
        where_clause = 'corresponding_gene_call IN (%s)' % ','.join(['{}'.format(x) for x in remove])
        for table_name in self.structure_db.db.get_table_names():
            if 'corresponding_gene_call' in self.structure_db.db.get_table_structure(table_name):
                self.structure_db.db.remove_some_rows_from_table(table_name, where_clause)

        self.run.info_single("The requested genes have been successfully removed.", nl_after=1)
        self.progress.end()


    def parse_genes(self, comma_delimited_genes=None, genes_filepath=None):
        if comma_delimited_genes:
            gene_caller_ids = set([x.strip() for x in comma_delimited_genes.split(',')])
            genes = []
            for gene in gene_caller_ids:
                try:
                    genes.append(int(gene))
                except:
                    raise ConfigError("Anvi'o does not like your gene caller id '%s'..." % str(gene))

        elif genes_filepath:
            filesnpaths.is_file_tab_delimited(genes_filepath, expected_number_of_fields=1)

            try:
                genes = set([int(s.strip()) for s in open(genes_filepath).readlines()])
            except ValueError:
                raise ConfigError("Well. Anvi'o was working on your genes in `%s` ... and ... those gene IDs did not "
                                  "look like anvi'o gene caller ids :/ Anvi'o is now sad." % genes_filepath)

        return set(genes)


    def get_MODELLER_params_used_when_db_was_created(self):
        self.progress.new("Determining parameters used during structure database creation")

        meta_table_dict = self.structure_db.db.get_table_as_dict("self")
        modeller_params = [
            ('modeller_database', str),
            ('scoring_method', str),
            ('percent_identical_cutoff', float),
            ('very_fast', lambda x: bool(int(x))),
            ('deviation', float),
            ('max_number_templates', int),
            ('num_models', int),
            ('skip_DSSP', lambda x: bool(int(x))),
        ]

        self.run.info_single("Previous parameters used for creating the structure database", nl_before=1)
        for param, cast_type in modeller_params:
            setattr(self, param, cast_type(meta_table_dict[param]["value"])) # set to self
            setattr(self.args, param, cast_type(meta_table_dict[param]["value"])) # set to self.args (passed to MODELLER)
            self.run.info(param, getattr(self, param))

        self.progress.end()


    def sanity_check_for_adding_genes(self):

        # check for genes that do not appear in the contigs database
        bad_gene_caller_ids = [g for g in self.genes_of_interest if g not in self.genes_in_contigs_database]
        if bad_gene_caller_ids:
            raise ConfigError(("This gene caller id you" if len(bad_gene_caller_ids) == 1 else \
                               "These gene caller ids you") + " want to add to the structure database\
                               are not known to the contigs database: {}. You have only 2 lives\
                               left. 2 more mistakes, and anvi'o will automatically uninstall\
                               itself. Yes, seriously :(".format(",".join([str(x) for x in bad_gene_caller_ids])))

        # check for genes that do already appear in the structure database
        redundant_gene_caller_ids = [g for g in self.genes_of_interest if g in self.structure_db.genes_queried]
        if redundant_gene_caller_ids and not self.skip_genes_if_already_present:
            raise ConfigError(("This gene caller id you" if len(redundant_gene_caller_ids) == 1 else \
                               "These gene caller ids you") + " want to add to the structure database\
                               is already in the structure database: {}. If you want to re-do the\
                               modelling, then first remove it with --genes-to-remove or\
                               --genes-to-remove-file (you can do it in the same\
                               anvi-update-structure-database command).".\
                                   format(",".join([str(x) for x in redundant_gene_caller_ids])))

        # raise warning if number of genes is greater than 20
        if len(self.genes_of_interest) > 20:
            self.run.warning("Modelling protein structures is no joke. The number of genes you want "
                             "to append to the structure database is {}, which is a lot (of time!). "
                             "CTRL + C to cancel.".format(len(self.genes_of_interest)))

        if not self.skip_DSSP:
            if utils.is_program_exists("mkdssp", dont_raise=True): # mkdssp is newer and preferred
                self.DSSP_executable = "mkdssp"

            if not self.DSSP_executable:
                if utils.is_program_exists("dssp", dont_raise=True):
                    self.DSSP_executable = "dssp"
                else:
                    raise ConfigError("An anvi'o function needs 'mkdssp' or 'dssp' to be installed on your system, but "
                                      "neither seem to appear in your path :/ If you are certain you have either on your "
                                      "system (for instance you can run either by typing 'mkdssp' or 'dssp' in your terminal "
                                      "window), you may want to send a detailed bug report. If you want to install DSSP, "
                                      "check out http://merenlab.org/2016/06/18/installing-third-party-software/#dssp. "
                                      "If you want to skip secondary structure and solvent accessibility annotation, "
                                      "provide the flag --skip-DSSP.")

            self.run.info_single("Anvi'o found the DSSP executable `%s`, and will use it."\
                                  % self.DSSP_executable, nl_before=1, nl_after=1)

        genes_missing_from_structure_db = [gene for gene in self.genes_of_interest if gene not in self.structure_db.genes_with_structure]
        if genes_missing_from_structure_db:
            show_a_few = genes_missing_from_structure_db if len(genes_missing_from_structure_db) <= 10 else genes_missing_from_structure_db[:10]
            raise ConfigError("{} gene(s) were specified by you but don't exist in the structure database. Here are some of their IDs: {}".
                format(len(genes_missing_from_structure_db), ', '.join([str(x) for x in show_a_few])))

        return genes_of_interest


    def load_structure_db(self):
        utils.is_structure_db(self.structure_db_path)
        self.structure_db = StructureDatabase(self.structure_db_path,
                                              ignore_hash=True,
                                              create_new=False)


def main(args):
    structops.StructureUpdate(args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    groupD = parser.add_argument_group('DATABASES', 'Declaring relevant anvi\'o databases. First things first.')
    groupG = parser.add_argument_group('GENES', 'Specifying which genes you want to be modelled.')
    groupO = parser.add_argument_group('OUTPUT', 'Output file and output style.')
    groupE = parser.add_argument_group('MODELLER EXECUTABLE', 'Which executable program to use for MODELLER, e.g. mod9.19')
    groupM = parser.add_argument_group('MISCALLANEOUS', 'Other stuff')

    groupD.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))
    groupD.add_argument(*anvio.A('structure-db'), **anvio.K('structure-db'))

    groupG.add_argument("--genes-to-remove", "-r", type=str, help = \
                        """Gene caller ids to remove from your structure database. Multiple of them \
                           can be declared by separating with comma (e.g. --genes-to-remove 2,4,5,6).""")

    groupG.add_argument("--genes-to-remove-file", "-R", type=str, help = \
                        """A file of gene caller ids to remove from your structure database. Each line \
                           in the file should be a gene caller id.""")

    groupG.add_argument("--genes-to-add", "-a", type=str, help = \
                        """Gene caller ids to remove from your structure database. Multiple of them \
                           can be declared by separating with comma (e.g. --genes-to-add 2,4,5,6).""")

    groupG.add_argument("--genes-to-add-file", "-A", type=str, help = \
                        """A file of gene caller ids to remove from your structure database. Each line \
                           in the file should be a gene caller id.""")

    groupO.add_argument(*anvio.A('dump-dir'), **anvio.K('dump-dir'))

    groupE.add_argument("--modeller-executable", type=str, help = \
                        """The MODELLER program to use. For example, `mod9.19`. If you don't choose, anvi'o \
                           will figure it out""")

    groupM.add_argument("--skip-genes-if-already-present", action='store_true', help = \
                        """If you try to add a gene that is already present, instead of complaining it will \
                           be skipped.""")

    args = parser.parse_args()

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(2)
    except ModellerError as e:
        print(e)
        sys.exit(3)
