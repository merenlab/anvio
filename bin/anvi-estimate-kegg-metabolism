#!/usr/bin/env python
# -*- coding: utf-8

import sys

import anvio
import anvio.kegg as kegg

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__requires__ = ["contigs-db", "kegg-db", "kegg-functions",]
__provides__ = ["kegg-metabolism",]
__description__ = "Reconstructs metabolic pathways and estimates pathway completeness for a given set of contigs."


@time_program
def main(args):
    m = kegg.KeggMetabolismEstimator(args)
    m.estimate_metabolism()

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description=__description__)

    groupI = parser.add_argument_group('INPUT', "The minimum you must provide this program is a contigs database. In which case\
                                                    anvi'o will attempt to estimate metabolism for all contigs in it, assuming that\
                                                    the contigs database represents a single genome. If the contigs database is actually\
                                                    a metagenome, you should use the `--metagenome` flag to explicitly declare that.")
    groupI.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    groupI.add_argument(*anvio.A('metagenome-mode'), **anvio.K('metagenome-mode'))
    groupI.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir'))

    groupP = parser.add_argument_group('ADDITIONAL INPUT', "If you also provide a profile database AND a collection name, anvi'o will \
                                                    estimate metabolism separately for each bin in your collection. You can also limit \
                                                    those estimates to a specific bin or set of bins in the collection using the parameters \
                                                    `--bin-id` or `--bin-ids-file`, respectively.")
    groupP.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    groupP.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    groupP.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    groupP.add_argument(*anvio.A('bin-ids-file'), **anvio.K('bin-ids-file'))

    groupC = parser.add_argument_group('OUTPUT', "Parameters for controlling estimation output. The output will be TAB-delimited files which by \
                                                 default are prefixed with 'kegg-metabolism', but you can of course change that name here.")
    groupC.add_argument(*anvio.A('module-completion-threshold'), **anvio.K('module-completion-threshold'))
    groupC.add_argument(*anvio.A('output-file-prefix'), **anvio.K('output-file-prefix'))

    groupD = parser.add_argument_group('DEBUG', "Parameters to use if you think something fishy is going on or otherwise want to exert more control. Go for it.")
    groupD.add_argument(*anvio.A('get-raw-data-as-json'), **anvio.K('get-raw-data-as-json'))
    groupD.add_argument(*anvio.A('store-json-without-estimation'), **anvio.K('store-json-without-estimation'))
    groupD.add_argument(*anvio.A('estimate-from-json'), **anvio.K('estimate-from-json'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
