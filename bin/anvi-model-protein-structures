#!/usr/bin/env python
# -*- coding: utf-8
"""
DEVELOPMENT NOTES:
==================
sup

"""

import sys
import anvio
import argparse

import anvio.terminal as terminal
import anvio.structureops as structops

from anvio.errors import ConfigError, FilesNPathsError, ModellerError


__author__ = "A. Murat Eren"
__copyright__ = "Copyright 2015, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"


run = terminal.Run()
progress = terminal.Progress()


def main(args):

    structure = structops.Structure(args)
    structure.process()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Identifies genes in your contigs database that encode proteins that are \
                                                  homologous to proteins with solved structures. If sufficiently similar \
                                                  homologs are identified, they are used as structural templates to predict \
                                                  the 3D structure of proteins in your contigs database. This means we are \
                                                  at the mercy of structural biologists: if they have not solved a structure \
                                                  of a protein sufficiently similar in AA sequence to yours, this isn't going \
                                                  to work. But it's worth a try! The software we are using is MODELLER, more \
                                                  of which can be learned about at https://salilab.org/modeller/, or in our \
                                                  tutorial at FIXME")

    groupD = parser.add_argument_group('DATABASES', 'Declaring relevant anvi\'o databases. First things first.')
    groupG = parser.add_argument_group('GENES', 'Specifying which genes you want to be modelled.')
    groupO = parser.add_argument_group('OUTPUT', 'Output file and output style.')
    groupM = parser.add_argument_group('MODELLER PARAMS', 'Parameters for MODELLER\'s homology modeling.')

    groupD.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))
    groupG.add_argument(*anvio.A('genes-of-interest'), **anvio.K('genes-of-interest'))
    groupG.add_argument(*anvio.A('gene-caller-ids'), **anvio.K('gene-caller-ids'))
    groupO.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir'))
    groupO.add_argument(*anvio.A('black-no-sugar'), **anvio.K('black-no-sugar'))

    groupM.add_argument("--num-models", "-N", type=int, default=3, help = \
                        """Number of models""")

    groupM.add_argument("--deviation", "-d", type=float, default=4.0, help = \
                        """Deviation (angstroms)""")

    groupM.add_argument("--database-name", "-D", type=str, default="pdb_95", help = \
                        """Which database name do you want to use? Default is "pdb_95". If you have
                        your own database it must have either the extension .bin or .pir. If you
                        don't have a database, don't worry, we will take care of you. """)

    groupM.add_argument("--best", "-b", type=str, default="DOPE_score", help = \
                        """How should the best model be decided? The options are any of GA341_score,
                        DOPE_score, molpdf, and average. GA341 is an absolute measure, where a good
                        model will have a score near 1.0, whereas anything below 0.6 can be
                        considered bad. DOPE and molpdf scores are relative energy measures, where
                        lower scores are better. DOPE has been generally shown to be a better
                        distinguisher between good and bad models than molpdf. By default, DOPE is
                        used. To learn more see the MODELLER tutorial:
                        https://salilab.org/modeller/tutorial/basic.html.  If --black-no-sugar flag
                        is provided. This parameter will not do anything.
                        """)

    groupM.add_argument("--very-fast", action = 'store_true', help = \
                        """Speed things up at the cost of accuracy.""")

    groupM.add_argument("--percent-identical-cutoff", "-p", type=float, default=25, help = \
                        """Percent identical.""")

    groupM.add_argument("--max-number-templates", "-T", type=int, default=5, help = \
                        """Max number of templates to use""")

    args = parser.parse_args()

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(2)
    except ModellerError as e:
        print(e)
        sys.exit(3)
