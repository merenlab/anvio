#!/usr/bin/env python
# -*- coding: utf-8
"""A script to export a FASTA files from contigs databases and compute ani."""

import os
import sys
import shutil
import hashlib
import argparse

import anvio
import anvio.db as db
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.clustering as clustering
import anvio.summarizer as summarizer
import anvio.filesnpaths as filesnpaths
import anvio.genomedistance as genomedistance
import anvio.genomedescriptions as genomedescriptions


from anvio.tables.miscdata import TableForLayerAdditionalData
from anvio.tables.miscdata import TableForLayerOrders

from anvio.errors import ConfigError, FilesNPathsError
import anvio.errors


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Ozcan Esen"
__email__ = "ozcanesen@gmail.com"
__requires__ = ['external-genomes', 'internal-genomes', 'pan-db']
__provides__ = ['ani-txt', 'ani']
__description__ = ("Export sequences from external genomes and compute ANI. If a Pan Database "
                   "is given anvi'o will write computed output to misc data tables of Pan Database.")


run = terminal.Run()


def main(args):
    # some quick checks
    clustering.is_distance_and_linkage_compatible(args.distance, args.linkage)

    if args.min_alignment_fraction < 0 or args.min_alignment_fraction > 1:
        raise ConfigError("The minimum alignment fraction must be a value between 0.0 and 1.0. %.2f does\
                           not work for anvi'o :/" % args.min_alignment_fraction)

    if args.significant_alignment_length and args.significant_alignment_length < 0:
        raise ConfigError("You missed concept :/ Alignment length can't be smaller than 0.")

    if args.significant_alignment_length and not args.min_alignment_fraction:
        raise ConfigError("Using the --significant-alignment-length parameter Without the --min-alignment-fraction\
                           parameter does not make any sense. But how could you know that unless you read the help\
                           menu? Yep. Anvi'o is calling the bioinformatics police on you :(")

    filesnpaths.check_output_directory(args.output_dir, ok_if_exists=False)

    program = genomedistance.ANI(args)
    temp_dir = program.get_fasta_sequences_dir()
    program.process(temp_dir)
    results = program.results
    genome_names = program.genome_names

    if anvio.DEBUG:
        import json
        for report in results:
            run.warning(None, header=report)
            print(json.dumps(results[report], indent=2))

    clusterings = {}
    for report_name in results:
        try:
            clusterings[report_name] = clustering.get_newick_tree_data_for_dict(results[report_name],
                                                                                linkage=args.linkage,
                                                                                distance=args.distance)
        except:
            raise ConfigError("Bad news :/ Something went wrong while anvi'o was processing the output for\
                               '%s'. You can find the offending file if you search for the output file in\
                               the temporary output directory '%s'." % (report_name, os.path.join(temp_dir, 'output')))

    os.mkdir(args.output_dir)
    run.warning(None, header="ANI RESULTS", lc='green')
    for report_name in results:
        output_path_for_report = os.path.join(args.output_dir, args.method + '_' + report_name)

        utils.store_dict_as_TAB_delimited_file(results[report_name], output_path_for_report + '.txt')
        with open(output_path_for_report + '.newick', 'w') as f:
            f.write(clusterings[report_name])
        run.info_single('Matrix and clustering of \'%s\' written to output directory' % report_name.replace('_',' '), mc='green')

    if args.pan_db:
        utils.is_pan_db(args.pan_db)
        pan = db.DB(args.pan_db, anvio.__pan__version__)

        db_genome_names = set([])
        G = lambda g: pan.get_meta_value(g).strip().split(',')
        for genome_name in G('external_genome_names') + G('internal_genome_names'):
            db_genome_names.add(genome_name) if len(genome_name) else None

        found_only_in_db = db_genome_names.difference(genome_names)
        found_only_in_results = genome_names.difference(db_genome_names)

        if len(found_only_in_results) > 0:
            raise ConfigError("Some genome names found in ANI results do not seem to be exist in the pan database. \
                Here are the list of them: " + ", ".join(list(found_only_in_results)))

        if len(found_only_in_db) > 0:
            run.warning("Some genome names found in pan database do not seem to be exist in the ANI report. \
                anvi'o will add the ones that are found in database anyway, but here is the list of missing ones: \
                " + ", ".join(list(found_only_in_db)))

        run.warning(None, header="MISC DATA MAGIC FOR YOUR PAN DB", lc='green')
        for report_name in results:
            target_data_group = 'ANI_%s' % (report_name)
            l_args = argparse.Namespace(pan_db=args.pan_db, just_do_it=True, target_data_group=target_data_group)
            TableForLayerAdditionalData(l_args, r=terminal.Run(verbose=False)).add(results[report_name], list(results[report_name].keys()))

            TableForLayerOrders(args, r=terminal.Run(verbose=False)).add({'ANI_' + report_name: {'data_type': 'newick',
                                                                  'data_value': clusterings[report_name]}})

            run.info_single("Additional data and order for %s are now in pan db" % target_data_group.replace('_', ' '), mc='green')

    if anvio.DEBUG:
        run.warning("The temp directory, %s, is kept. Please don't forget to clean it up\
                     later" % temp_dir, header="Debug")
    else:
        run.info_single('Cleaning up the temp directory (you can use `--debug` if you would\
                         like to keep it for testing purposes)', nl_before=1, nl_after=1)
        shutil.rmtree(temp_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT OPTIONS', "Tell anvi'o what you want.")
    groupA.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))

    groupB = parser.add_argument_group('OUTPUT OPTIONS', "Tell anvi'o where to store your results.")
    groupB.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir', {'required': True }))
    groupB.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False, 'help': "This is\
                        totally optional, but very useful when applicable. If you are running ANI for\
                        genomes for which you already have an anvi'o pangeome, then you can show where\
                        the pan database is and anvi'o would automatically add the results into the\
                        misc data tables of your pangenome. Those data can then be shown as ANI heatmaps\
                        on the pan interactive interface through the 'layers' tab."}))

    groupC = parser.add_argument_group('FILTERING HITS', "These filters can save lives. Ask Luke.")
    groupC.add_argument(*anvio.A('min-alignment-fraction'), **anvio.K('min-alignment-fraction'))
    groupC.add_argument(*anvio.A('significant-alignment-length'), **anvio.K('significant-alignment-length'))
    groupC.add_argument(*anvio.A('min-full-percent-identity'), **anvio.K('min-full-percent-identity', {'default': 0.0}))

    groupD = parser.add_argument_group('pyANI METHOD', "Tell anvi'o to tell pyANI what method you wish to use.")
    groupD.add_argument('--method', default='ANIb', type=str, help="Method for pyANI. The default is %(default)s.\
                         You must have the necessary binary in path for whichever method you choose. According to\
                         the pyANI help for v0.2.7 at https://github.com/widdowquinn/pyani, the method 'ANIm' uses\
                         MUMmer (NUCmer) to align the input sequences. 'ANIb' uses BLASTN+ to align 1020nt fragments\
                         of the input sequences. 'ANIblastall': uses the legacy BLASTN to align 1020nt fragments\
                         Finally, 'TETRA': calculates tetranucleotide frequencies of each input sequence",\
                         choices=['ANIm', 'ANIb', 'ANIblastall', 'TETRA'])

    groupE = parser.add_argument_group('HIERARCHICAL CLUSTERING', "Once pyANI is done with its magic, it reports ANI\
                         between genomes as distance matrix files, which can be clustered into nice looking dendrograms\
                         to display the relationships between genomes nicely (in the anvi'o interface and elsewhere).\
                         Here you can set the distance metric and the linkage algorithm for that.")
    groupE.add_argument(*anvio.A('distance'), **anvio.K('distance', {'help': 'The distance metric for the hierarchical \
                         clustering. The default is "%(default)s".'}))
    groupE.add_argument(*anvio.A('linkage'), **anvio.K('linkage', {'help': 'The linkage method for the hierarchical \
                         clustering. The default is "%(default)s".'}))

    groupF = parser.add_argument_group('OTHER IMPORTANT STUFF', "Yes. You're almost done.")
    groupF.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupF.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))
    groupF.add_argument(*anvio.A('log-file'), **anvio.K('log-file'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
