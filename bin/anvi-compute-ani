#!/usr/bin/env python
# -*- coding: utf-8
"""A script to export a FASTA files from contigs databases and compute ani."""

import os
import sys
import shutil
import argparse

import anvio
import anvio.terminal as terminal
import anvio.genomedistance as genomedistance

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Ozcan Esen"
__email__ = "ozcanesen@gmail.com"
__requires__ = ['external-genomes', 'internal-genomes', 'pan-db']
__provides__ = ['ani-txt', 'ani']
__description__ = ("Export sequences from external genomes and compute ANI. If a Pan Database "
                   "is given anvi'o will write computed output to misc data tables of Pan Database.")


run = terminal.Run()


def main(args):
    d = genomedistance.program_class_dictionary[args.program](args)
    d.process()

    if anvio.DEBUG:
        import json
        for report in d.results:
            run.warning(None, header=report)
            print(json.dumps(d.results[report], indent=2))

    d.cluster()
    d.report()
    d.add_to_pan_db()

    if anvio.DEBUG:
        run.warning("The temp directory, %s, is kept. Please don't forget to clean it up\
                     later" % d.temp_dir, header="Debug")
    else:
        run.info_single('Cleaning up the temp directory (you can use `--debug` if you would\
                         like to keep it for testing purposes)', nl_before=1, nl_after=1)
        shutil.rmtree(d.temp_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    group_INPUT = parser.add_argument_group('INPUT OPTIONS', "Tell anvi'o what you want.")
    group_INPUT.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    group_INPUT.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))
    group_INPUT.add_argument(*anvio.A('fasta-text-file'), **anvio.K('fasta-text-file'))

    group_OUTPUT = parser.add_argument_group('OUTPUT OPTIONS', "Tell anvi'o where to store your results.")
    group_OUTPUT.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir', {'required': True }))
    group_OUTPUT.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False, 'help': "This is\
                        totally optional, but very useful when applicable. If you are running this for\
                        genomes for which you already have an anvi'o pangeome, then you can show where\
                        the pan database is and anvi'o would automatically add the results into the\
                        misc data tables of your pangenome. Those data can then be shown as heatmaps\
                        on the pan interactive interface through the 'layers' tab."}))

    group_PROGRAM = parser.add_argument_group('Program', "Tell anvi'o which similarity program to run.")
    group_PROGRAM.add_argument('--program', type=str, required=True, help="Tell anvi'o which program to run to process genome similarity.\
                        You can either use pyANI for ANI calculations or sourmash for mash distance. You must have\
                        the necessary binary in path for the program you choose.",\
                        choices=['pyANI','sourmash'])

    group_PYANI = parser.add_argument_group('pyANI Settings', "Tell anvi'o to tell pyANI what method you wish to use\
                                             and what settings to set. Only if `--program` is set to `pyANI`")
    group_PYANI.add_argument('--method', default='ANIb', type=str, help="Method for pyANI. The default is %(default)s.\
                         You must have the necessary binary in path for whichever method you choose. According to\
                         the pyANI help for v0.2.7 at https://github.com/widdowquinn/pyani, the method 'ANIm' uses\
                         MUMmer (NUCmer) to align the input sequences. 'ANIb' uses BLASTN+ to align 1020nt fragments\
                         of the input sequences. 'ANIblastall': uses the legacy BLASTN to align 1020nt fragments\
                         Finally, 'TETRA': calculates tetranucleotide frequencies of each input sequence",\
                         choices=['ANIm', 'ANIb', 'ANIblastall', 'TETRA'])
    group_PYANI.add_argument(*anvio.A('min-alignment-fraction'), **anvio.K('min-alignment-fraction'))
    group_PYANI.add_argument(*anvio.A('significant-alignment-length'), **anvio.K('significant-alignment-length'))
    group_PYANI.add_argument(*anvio.A('min-full-percent-identity'), **anvio.K('min-full-percent-identity', {'default': 0.0}))

    group_SOURMASH = parser.add_argument_group('Sourmash settings', "Tell anvi'o how to run sourmash")
    group_SOURMASH.add_argument('--kmer-size', type=int, default=51, metavar='INT', help="Set the k-mer size for k-mer\
                        distance checks. sourmash recommends a size of 51, which is the default option. For\
                        relatively shorter or longer genomes, you may want to decrease or increase this size\
                        respectively")
    group_SOURMASH.add_argument('--scale', type=int, default=1000, metavar='INT', help='Set the compression ratio for\
                        fasta signature file computations. The default is 1000. Smaller ratios decrease sensitivity,\
                        while larger ratios will lead to large fasta signatures.')


    group_CLUSTERING = parser.add_argument_group('HIERARCHICAL CLUSTERING', "anvi-compute-genome-distance outputs distance\
                                   matrix files, which can be clustered into nice looking dendrograms to display the\
                                   relationships between genomes nicely (in the anvi'o interface and elsewhere).\
                                   Here you can set the distance metric and the linkage algorithm for that.")
    group_CLUSTERING.add_argument(*anvio.A('distance'), **anvio.K('distance', {'help': 'The distance metric for the hierarchical \
                                   clustering. The default is "%(default)s".'}))
    group_CLUSTERING.add_argument(*anvio.A('linkage'), **anvio.K('linkage', {'help': 'The linkage method for the hierarchical \
                         clustering. The default is "%(default)s".'}))

    group_OTHER = parser.add_argument_group('OTHER IMPORTANT STUFF', "Yes. You're almost done.")
    group_OTHER.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    group_OTHER.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))
    group_OTHER.add_argument(*anvio.A('log-file'), **anvio.K('log-file'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
