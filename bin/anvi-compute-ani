#!/usr/bin/env python
# -*- coding: utf-8
"""A script to export a FASTA files from contigs databases and compute ani."""

import os
import sys
import shutil
import argparse

import anvio
import anvio.terminal as terminal
import anvio.genomedistance as genomedistance

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Ozcan Esen"
__email__ = "ozcanesen@gmail.com"
__requires__ = ['external-genomes', 'internal-genomes', 'pan-db']
__provides__ = ['ani-txt', 'ani']
__description__ = ("Export sequences from external genomes and compute ANI. If a Pan Database "
                   "is given anvi'o will write computed output to misc data tables of Pan Database.")


run = terminal.Run()


def main(args):

    # FIXME
    program_name = 'pyANI'

    d = genomedistance.program_class_dictionary[program_name](args)
    d.process()

    if anvio.DEBUG:
        import json
        for report in d.results:
            run.warning(None, header=report)
            print(json.dumps(d.results[report], indent=2))

    d.cluster()
    d.report()
    d.add_to_pan_db()

    if anvio.DEBUG:
        run.warning("The temp directory, %s, is kept. Please don't forget to clean it up\
                     later" % d.temp_dir, header="Debug")
    else:
        run.info_single('Cleaning up the temp directory (you can use `--debug` if you would\
                         like to keep it for testing purposes)', nl_before=1, nl_after=1)
        shutil.rmtree(d.temp_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT OPTIONS', "Tell anvi'o what you want.")
    groupA.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))
    groupA.add_argument(*anvio.A('fasta-text-file'), **anvio.K('fasta-text-file'))

    groupB = parser.add_argument_group('OUTPUT OPTIONS', "Tell anvi'o where to store your results.")
    groupB.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir', {'required': True }))
    groupB.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False, 'help': "This is\
                        totally optional, but very useful when applicable. If you are running this for\
                        genomes for which you already have an anvi'o pangeome, then you can show where\
                        the pan database is and anvi'o would automatically add the results into the\
                        misc data tables of your pangenome. Those data can then be shown as heatmaps\
                        on the pan interactive interface through the 'layers' tab."}))

    groupC = parser.add_argument_group('FILTERING HITS', "These filters can save lives. Ask Luke.")
    groupC.add_argument(*anvio.A('min-alignment-fraction'), **anvio.K('min-alignment-fraction'))
    groupC.add_argument(*anvio.A('significant-alignment-length'), **anvio.K('significant-alignment-length'))
    groupC.add_argument(*anvio.A('min-full-percent-identity'), **anvio.K('min-full-percent-identity', {'default': 0.0}))

    groupD = parser.add_argument_group('pyANI METHOD', "Tell anvi'o to tell pyANI what method you wish to use.")
    groupD.add_argument('--method', default='ANIb', type=str, help="Method for pyANI. The default is %(default)s.\
                         You must have the necessary binary in path for whichever method you choose. According to\
                         the pyANI help for v0.2.7 at https://github.com/widdowquinn/pyani, the method 'ANIm' uses\
                         MUMmer (NUCmer) to align the input sequences. 'ANIb' uses BLASTN+ to align 1020nt fragments\
                         of the input sequences. 'ANIblastall': uses the legacy BLASTN to align 1020nt fragments\
                         Finally, 'TETRA': calculates tetranucleotide frequencies of each input sequence",\
                         choices=['ANIm', 'ANIb', 'ANIblastall', 'TETRA'])

    groupE = parser.add_argument_group('HIERARCHICAL CLUSTERING', "anvi-compute-genome-distance outputs distance\
                         matrix files, which can be clustered into nice looking dendrograms to display the\
                         relationships between genomes nicely (in the anvi'o interface and elsewhere).\
                         Here you can set the distance metric and the linkage algorithm for that.")
    groupE.add_argument(*anvio.A('distance'), **anvio.K('distance', {'help': 'The distance metric for the hierarchical \
                         clustering. The default is "%(default)s".'}))
    groupE.add_argument(*anvio.A('linkage'), **anvio.K('linkage', {'help': 'The linkage method for the hierarchical \
                         clustering. The default is "%(default)s".'}))

    groupF = parser.add_argument_group('OTHER IMPORTANT STUFF', "Yes. You're almost done.")
    groupF.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupF.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))
    groupF.add_argument(*anvio.A('log-file'), **anvio.K('log-file'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
