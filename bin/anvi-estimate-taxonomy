#!/usr/bin/env python
# -*- coding: utf-8

import argparse
import os
import re
import sys
import time
from collections import Counter

import anvio
import anvio.taxoestimation as taxoestimation
import anvio.terminal as terminal
import anvio.ccollections as ccollections
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError

import anvio.db as db
import anvio.hmmops as hmmops
import anvio.utils as utils



__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Quentin Clayssen"
__email__ = "quentin.clayssen@gmail.com"


run = terminal.Run()
progress = terminal.Progress()

def main(args):

    if args.profile_db:
        utils.is_profile_db_and_contigs_db_compatible(
            args.profile_db, args.contigs_db)

    t = taxoestimation.SCGsTaxonomy(args)
    t.show_taxonomy_estimation()


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Create diamond database matching with match between import fasta of SCGs with taxonomy and HMM from anvi'o.")
    groupH = parser.add_argument_group('Taxonomy', "Taxomy assignation Argument\
                                        /!\.")

    groupH.add_argument(*anvio.A('contigs-db'), **
                        anvio.K('contigs-db', {'required': True}))
    parser.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupH.add_argument(*anvio.A('taxonomy-database'),** anvio.K('taxonomy-database'))
    groupH.add_argument(*anvio.A('output-file'), **anvio.K('output-file'))
    groupH.add_argument(*anvio.A('cut_off_methode'), **anvio.K('cut_off_methode'))
    parser.add_argument('--metagenome', default=False, action="store_true", help="metagenomes")
    groupB = parser.add_argument_group('INPUT OPTION #2: CONTIGS DB + PROFLIE DB', "You can also work with anvi'o profile databases and collections\
                                        stored in them. If you go this way, you still will need to provide a contigs database. If you\
                                        just specify a collection name, you will get hits from every bin in it. You can also use\
                                        the bin name or bin ids file parameters to specify your interest more precisely.")
    groupB.add_argument(*anvio.A('profile-db'), **anvio
                        .K('profile-db', {'required': False}))
    groupB.add_argument(*anvio.A('collection-name'),
                        **anvio.K('collection-name'))
    groupB.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    groupB.add_argument(*anvio.A('bin-ids-file'), **anvio.K('bin-ids-file'))


    #parser.add_argument(*anvio.A('list-states'), **anvio.K('list-states'))

    args = anvio.get_args(parser)

    try:
        main(args)

    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
