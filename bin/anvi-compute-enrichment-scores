#!/usr/bin/env python
# -*- coding: utf-8
"""A program that computes enrichment scores and group associations for annotated
   entities across groups of genomes or samples. General version of anvi-get-enriched-functions-per-pan-group."""

import sys

import anvio
import anvio.terminal as terminal
import anvio.summarizer as summarizer
import anvio.kegg as kegg
import anvio.utils as utils

from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__resources__ = []
__tags__ = ["pangenomics", "functions", "metabolism"]
__requires__ = ['kegg-metabolism', 'groups-txt', 'misc-data-layers-category', 'pan-db', 'genomes-storage-db',]
__provides__ = ['enrichment-txt',]
__description__ = ("A program that creates the input for `anvi-script-enrichment-stats` and runs that "
                   "script to compute enrichment scores and group associations for annotated entities "
                   "across groups of genomes or samples.")

run = terminal.Run()
progress = terminal.Progress()

def main(args):

    # sanity check for multiple input options
    if ((args.pan_or_profile_db or args.genomes_storage) and (args.modules_txt or args.groups_txt)) \
    or (args.genomes_storage and args.contigs_db) \
    or ((args.modules_txt or args.groups_txt) and (args.contigs_db or args.pan_or_profile_db)):
        raise ConfigError("Confused anvi'o is confused. You appear to have selected multiple input options. "
                          "For obvious reasons, this will not work, so please go pick one option. ")

    # sanity checks for including all required inputs (for inputs that are not sanity checked downstream)
    if (args.pan_or_profile_db and not (args.genomes_storage or args.contigs_db)):
        raise ConfigError("If you have provided a pan database (input option #1), you must also provide a genomes storage database. "
                          "If you have provided a profile database (input option #3), you must also provide a contigs database.")
    if (args.genomes_storage and not args.pan_or_profile_db):
        raise ConfigError("For input option #1, you must provide both a genomes storage db and a pan db, but you haven't given anvi'o the pan db.")
    if (args.modules_txt and not args.groups_txt) or (args.groups_txt and not args.modules_txt):
        raise ConfigError("For input option #2, you must provide both a modules-txt file and a groups-txt file.")
    if (args.contigs_db and not args.pan_or_profile_db):
        raise ConfigError("For input option #3, you must provide both a contigs db and a profile db, but you haven't given anvi'o the profile db.")

    db_type = utils.get_db_type(args.pan_or_profile_db) if args.pan_or_profile_db else None

    if db_type == 'pan':
        args.pan_db = args.pan_or_profile_db
        s = summarizer.PanSummarizer(args, lazy_init=True)
        s.functional_enrichment_stats()
    elif args.modules_txt:
        e = kegg.KeggModuleEnrichment(args)
        e.run_enrichment_stats()
    elif db_type == 'profile':
        args.profile_db = args.pan_or_profile_db
        s = summarizer.ProfileSummarizer(args)
    else:
        raise ConfigError("Anvi'o is not sure what you hope to accomplish by not providing any of the suggested input options.")

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT OPTION #1: PANGENOME',
                                        "Estimating enriched functions across pangenome groups. This option accomplishes the same thing "
                                        "as running `anvi-get-enriched-functions-per-pan-group`. You must provide a pan db and its "
                                        "genomes storage db, as well as the category variable to use for establishing groups and the "
                                        "annotation source which provides your functions of interest.")
    groupA.add_argument(*anvio.A('pan-or-profile-db'), **anvio.K('pan-or-profile-db', {'required': False}))
    groupA.add_argument(*anvio.A('genomes-storage'), **anvio.K('genomes-storage', {'required': False}))
    groupA.add_argument(*anvio.A('category-variable'), **anvio.K('category-variable'))
    groupA.add_argument(*anvio.A('annotation-source'), **anvio.K('annotation-source'))
    groupA.add_argument(*anvio.A('list-annotation-sources'), **anvio.K('list-annotation-sources'))
    groupA.add_argument(*anvio.A('include-gc-identity-as-function'), **anvio.K('include-gc-identity-as-function'))

    groupB = parser.add_argument_group('INPUT OPTION #2: ESTIMATED METABOLISM',
                                        "Estimating enriched modules across groups of samples. You must have 'modules mode' output from "
                                        "`anvi-estimate-metabolism` to serve as input for this option, as well as a separate file to "
                                        "specify which group each sample belongs to.")
    groupB.add_argument(*anvio.A('modules-txt'), **anvio.K('modules-txt'))
    groupB.add_argument(*anvio.A('groups-txt'), **anvio.K('groups-txt'))
    groupB.add_argument(*anvio.A('sample-header'), **anvio.K('sample-header'))
    groupB.add_argument(*anvio.A('module-completion-threshold'), **anvio.K('module-completion-threshold',
                                {'help': "This threshold defines the percent completeness score at which we consider a KEGG module to be 'present'"
                                         "in a given sample. That is, if a module's completeness in a sample is less than this value, then we say "
                                         "the module is not present in that sample, and this will affect the module's enrichment score. "
                                         "By extension, if a module's completeness is less than this value in all samples, it will have "
                                         "a very very low enrichment score (ie, it will not be considered enriched at all, because it doesn't occur in "
                                         "any groups). Note that the closer this number is to 0, the more meaningless this whole enrichment analysis is... "
                                         "but hey, this is your show. This threshold CAN be different from the completeness threshold used in `anvi-estimate-metabolism` "
                                         "if you wish. The default threshold is %(default)g."}))

    groupC = parser.add_argument_group('INPUT OPTION #3: COLLECTION OF BINS',
                                        "Estimating enriched functions across bins in a collection. Three things are required for this "
                                        "option: a contigs db, its profile db (use --pan-or-profile-db as described in option #1), and "
                                        "a collection name.")
    groupC.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    groupC.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    groupC.add_argument(*anvio.A('list-collections'), **anvio.K('list-collections'))

    groupO = parser.add_argument_group('OUTPUT OPTIONS', "What comes out the other end. (Please provide at least the output file name.)")
    groupO.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {'required': True}))
    groupO.add_argument(*anvio.A('exclude-ungrouped'), **anvio.K('exclude-ungrouped'))

    groupOP = parser.add_argument_group('OUTPUT OPTIONS FOR PANGENOMES', "Reporting options that only make sense for input option #1, aka functional "
                                                                         "enrichment in pangenomes.")
    groupOP.add_argument(*anvio.A('functional-occurrence-table-output'), **anvio.K('functional-occurrence-table-output'))

    groupE = parser.add_argument_group('OPTIONAL THINGIES', "If you want it, here it is, come and get it.")
    groupE.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
