#!/usr/bin/env python
# -*- coding: utf-8
"""A program that computes enrichment scores and group associations for annotated
   entities across groups of genomes or samples. General version of anvi-get-enriched-functions-per-pan-group."""

import sys

import anvio
import anvio.terminal as terminal
import anvio.summarizer as summarizer

from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__resources__ = []
##__tags__ = ["pangenomics", "functions"]                                       # TODO: update when finished
##__requires__ = ['kegg-metabolism', 'misc-data-layers-category', 'pan-db', 'genomes-storage-db',] # TODO: update when finished
##__provides__ = ['functional-enrichment-txt',]                                 # TODO: update when finished
__description__ = ("A program that creates the input for `anvi-script-enrichment-stats` and runs that "
                   "script to compute enrichment scores and group associations for annotated entities "
                   "across groups of genomes or samples.")

run = terminal.Run()
progress = terminal.Progress()

def main(args):

    if args.pan_db:
        s = summarizer.PanSummarizer(args, lazy_init=True)
        s.functional_enrichment_stats()
    elif args.modules_txt:
        pass

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT OPTION #1: PANGENOME',
                                        "Estimating enriched functions across pangenome groups. This option accomplishes the same thing "
                                        "as running `anvi-get-enriched-functions-per-pan-group`. ")
    groupA.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False}))
    groupA.add_argument(*anvio.A('genomes-storage'), **anvio.K('genomes-storage', {'required': False}))
    groupA.add_argument(*anvio.A('category-variable'), **anvio.K('category-variable'))
    groupA.add_argument(*anvio.A('annotation-source'), **anvio.K('annotation-source'))
    groupA.add_argument(*anvio.A('list-annotation-sources'), **anvio.K('list-annotation-sources'))
    groupA.add_argument(*anvio.A('include-gc-identity-as-function'), **anvio.K('include-gc-identity-as-function'))
    groupA.add_argument(*anvio.A('exclude-ungrouped'), **anvio.K('exclude-ungrouped'))

    groupB = parser.add_argument_group('INPUT OPTION #2: ESTIMATED METABOLISM',
                                        "Estimating enriched modules across groups of samples. You must have 'modules mode' output from "
                                        "`anvi-estimate-metabolism` to serve as input for this option, as well as a separate file to "
                                        "specify which group each sample belongs to.")
    groupB.add_argument(*anvio.A('modules-txt'), **anvio.K('modules-txt'))
    groupB.add_argument(*anvio.A('groups-txt'), **anvio.K('groups-txt'))

    groupO = parser.add_argument_group('OUTPUT OPTIONS', "What comes out the other end. (Please provide at least the output file name.)")
    groupO.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {'required': True}))

    groupOP = parser.add_argument_group('OUTPUT OPTIONS FOR PANGENOMES', "Reporting options that only make sense for input option #1, aka functional "
                                                                         "enrichment in pangenomes.")
    groupOP.add_argument(*anvio.A('functional-occurrence-table-output'), **anvio.K('functional-occurrence-table-output'))

    groupE = parser.add_argument_group('OPTIONAL THINGIES', "If you want it, here it is, come and get it.")
    groupE.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
