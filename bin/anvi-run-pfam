#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys

import anvio
import anvio.dbops as dbops
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths

from anvio.drivers.hmmer import HMMer
from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Ã–zcan Esen"
__email__ = "ozcanesen@gmail.com"


run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print


class Pfam(object):
    def __init__(self, args, run=run, progress=progress):
        self.args = args
        self.run = run
        self.progress = progress
        self.db_path = args.contigs_db
        self.num_threads = args.num_threads
        self.pfam_data_dir = args.pfam_data_dir

        filesnpaths.is_program_exists('hmmscan')
        utils.is_contigs_db(self.db_path)

        if not self.pfam_data_dir:
            self.pfam_data_dir = os.path.join(os.path.dirname(anvio.__file__), 'data/misc/Pfam')


        self.run.info('Pfam Database Directory', self.pfam_data_dir)
        self.run.info('Contigs Database', self.db_path)
        self.get_version()


    def get_version(self):
        pass


    def process(self):
        hmm_file = os.path.join(self.pfam_data_dir, 'Pfam-A.hmm.gz')
        class Args: pass
        args = Args()
        args.contigs_db = self.db_path
        contigs_db = dbops.ContigsSuperclass(args)
        tmp_directory_path = filesnpaths.get_temp_directory_path()

        target_files_dict = {'AA:GENE': os.path.join(tmp_directory_path, 'AA_gene_sequences.fa')}
        contigs_db.gen_FASTA_file_of_sequences_for_gene_caller_ids(output_file_path=target_files_dict['AA:GENE'],
                                                                   simple_headers=True,
                                                                   rna_alphabet=False,
                                                                   report_aa_sequences=True)

        hmmer = HMMer(target_files_dict, num_threads_to_use=self.num_threads)
        print(hmmer.run_hmmscan('Pfam', 'AA', 'GENE', None, None, [], hmm_file, None, '--cut_ga'))



if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Run Pfam on Contigs Database.')

    parser.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))
    parser.add_argument(*anvio.A('pfam-data-dir'), **anvio.K('pfam-data-dir'))
    parser.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))

    args = anvio.get_args(parser)

    try:
        pfam = Pfam(args)
        pfam.process()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
