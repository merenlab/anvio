#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys

import anvio
import anvio.dbops as dbops
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths

from anvio.drivers.hmmer import HMMer
from anvio.parsers import parser_modules
from anvio.errors import ConfigError, FilesNPathsError
from anvio.tables.genefunctions import TableForGeneFunctions


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Ã–zcan Esen"
__email__ = "ozcanesen@gmail.com"


run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print


class Pfam(object):
    def __init__(self, args, run=run, progress=progress):
        self.args = args
        self.run = run
        self.progress = progress
        self.contigs_db_path = args.contigs_db
        self.num_threads = args.num_threads
        self.pfam_data_dir = args.pfam_data_dir

        # load_catalog will populate this
        self.function_catalog = {}

        filesnpaths.is_program_exists('hmmscan')
        utils.is_contigs_db(self.contigs_db_path)

        if not self.pfam_data_dir:
            self.pfam_data_dir = os.path.join(os.path.dirname(anvio.__file__), 'data/misc/Pfam')


        self.run.info('Pfam Database Directory', self.pfam_data_dir)
        self.run.info('Contigs Database', self.contigs_db_path)

        self.get_version()
        self.load_catalog()


    def get_version(self):
        pass


    def load_catalog(self):
        catalog_path = os.path.join(self.pfam_data_dir, 'Pfam-A.clans.tsv')
        self.function_catalog = utils.get_TAB_delimited_file_as_dictionary(catalog_path, 
            column_names=['accession', 'clan', 'unknown_column1', 'unknown_column2', 'function'])


    def get_function_from_catalog(self, accession):
        if '.' in accession:
            accession = accession.split('.')[0]

        if not accession in self.function_catalog:
            # TO DO: messsages
            raise ConfigError("It seems hmmscan found a accession id that does not exists in Pfam catalog, Id: %s" % accession)

        return self.function_catalog[accession]['function'] # maybe merge other columns too?


    def process(self):
        hmm_file = os.path.join(self.pfam_data_dir, 'Pfam-A.hmm.gz')

        # initialize contigs database
        class Args: pass
        args = Args()
        args.contigs_db = self.contigs_db_path
        contigs_db = dbops.ContigsSuperclass(args)
        tmp_directory_path = filesnpaths.get_temp_directory_path()

        # export AA sequences for genes
        target_files_dict = {'AA:GENE': os.path.join(tmp_directory_path, 'AA_gene_sequences.fa')}
        contigs_db.gen_FASTA_file_of_sequences_for_gene_caller_ids(output_file_path=target_files_dict['AA:GENE'],
                                                                   simple_headers=True,
                                                                   rna_alphabet=False,
                                                                   report_aa_sequences=True)

        # run hmmscan
        hmmer = HMMer(target_files_dict, num_threads_to_use=self.num_threads)
        hmm_hits_file = hmmer.run_hmmscan('Pfam', 'AA', 'GENE', None, None, [], hmm_file, None, '--cut_ga')

        # parse hmmscan output
        parser = parser_modules['search']['hmmscan'](hmm_hits_file, alphabet='AA', context='GENE')
        search_results_dict = parser.get_search_results()

        # add functions to database
        functions_dict = {}
        counter = 0
        for hmm_hit in search_results_dict.values():
            functions_dict[counter] = {
                'gene_callers_id': hmm_hit['gene_callers_id'],
                'source': 'Pfam',
                'accession': hmm_hit['gene_name'],
                'function': self.get_function_from_catalog(hmm_hit['gene_hmm_id']),
                'e_value': hmm_hit['e_value'],

            }

            counter += 1

        gene_function_calls_table = TableForGeneFunctions(self.contigs_db_path, self.run, self.progress)
        gene_function_calls_table.create(functions_dict)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Run Pfam on Contigs Database.')

    parser.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))
    parser.add_argument(*anvio.A('pfam-data-dir'), **anvio.K('pfam-data-dir'))
    parser.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))

    args = anvio.get_args(parser)

    try:
        pfam = Pfam(args)
        pfam.process()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
