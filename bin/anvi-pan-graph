#!/usr/bin/env python
# -*- coding: utf-8
"""Compute a graph representation of a pangenome"""

import sys

import anvio
import anvio.panops as panops
import anvio.terminal as terminal

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ahenoch']
__requires__ = ['pan-db', 'genomes-storage-db', 'external-genomes']
__provides__ = ['pan-graph-json', 'pan-graph']
__description__ = ("An anvi'o program to compute a graph representation of pangenomes. It will do its magic, and store it into your "
                   "pan-db, or report a JSON formatted graph file, for downstream visualization and analyses with `anvi-display-pan-graph`")
__resources__ = []


run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT', "Anvi'o artifacts for the pan graph to be computed.")
    groupA.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False}))
    groupA.add_argument(*anvio.A('genomes-storage'), **anvio.K('genomes-storage', {'required': False}))
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes', {'required': False}))
    groupA.add_argument(*anvio.A('testing-yaml'), **anvio.K('testing-yaml'))

    groupB = parser.add_argument_group('OUTPUT', "By default, this program will store the resulting pangraph into the anvi'o pan-db "
                                "you have provided as input above, so it is accessible to downstream analyses seamlessly. Using the "
                                "the parameters below, you can ask anvi'o to store the resulting graph into a text output file (which "
                                "may be useful for developers for debugging purposes) or you can ask anvi'o to skip adding the results "
                                "to the pan-db.")
    groupB.add_argument(*anvio.A('output-file'), **anvio.K('output-file'))
    groupB.add_argument(*anvio.A('output-yaml'), **anvio.K('output-yaml'))
    groupB.add_argument(*anvio.A('output-summary'), **anvio.K('output-summary'))
    groupB.add_argument(*anvio.A('output-graphics'), **anvio.K('output-graphics'))
    groupB.add_argument('--skip-storing-in-pan-db', default=False, action="store_true", help="Do not store the resulting graph into "
                                "the pan-db.")

    groupC = parser.add_argument_group('DETAILS OF GRAPH COMPUTATION', "Variables that will influence the computation of the graph, the organization "
                                "of the gene clusters, and edges between them.")
    groupC.add_argument('--max-edge-length-filter', default = -1, type=int, help = "In the final pan graph, edges that connect gene clusters will vary in "
                                "their length. The longer edges that connect far gene clusters with one another will add additional layers to the final "
                                "display, reducing the readability of the overall graph structure. This parameter, which is by default set to %(default)d, "
                                "will remove edges that span across more than %(default)d gene clusters. You can change the thresold to make graph much "
                                "more accurate (lower values) or much more readable (higher values). We suggest you to start with the default, but "
                                "explore other options if you are not satisfied. Please keep in mind that pangenomes that contain a very large number of "
                                "genomic rearrangement events may take a very long time to compute with very small values of this parameter.")
    groupC.add_argument('--gene-cluster-grouping-threshold', default = 2, type=int, help = "This parameters influences how gene clusters that share "
                                "perfect synteny (across all genomes that contribute genes) are represented in the final display. With the default value "
                                "of %(default)d, the final graph will represent as many gene clusters as possible in groups.")
    groupC.add_argument('--gene-cluster-grouping-compression', default = 0.0, type=float, help = "Description.")

    args = parser.get_args(parser)

    try:
        graph = panops.Pangraph(args, run, progress)
        graph.process()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
