#!/usr/bin/env python
# -*- coding: utf-8
"""Generator of genome storages"""

import sys

import anvio
import anvio.terminal as terminal
import anvio.genomestorage as genomestorage

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "A. Murat Eren"
__copyright__ = "Copyright 2016, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"


run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Create a genome storage from internal or external genomes for a pan genome analysis.")

    groupA = parser.add_argument_group('EXTERNAL GENOMES', "External genomes listed as anvi'o contigs databases. As in, you have one\
                                                    or more genomes say from NCBI you want to work with, and you created an\
                                                    anvi'o contigs database for each one of them.")
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))

    groupB = parser.add_argument_group("INTERNAL GENOMES", "Genome bins stored in an anvi'o profile databases as collections.")
    groupB.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))

    groupC = parser.add_argument_group("PRO STUFF", "Things you may not have to change. But you never know (unless you read the help).")
    groupC.add_argument(*anvio.A('gene-caller'), **anvio.K('gene-caller'))

    groupD = parser.add_argument_group("OUTPUT", "Give it a nice name. Must end with '-GENOMES.h5'. This is primarily due to the fact\
                                                  that there are other .h5 files used throughout anvi'o and it would be better to\
                                                  distinguish this very special file from them.")
    groupD.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {'required': True}))

    args = parser.parse_args()

    try:
        pan = genomestorage.GenomeStorage(args, run, progress)
        pan.create_genomes_data_storage()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
