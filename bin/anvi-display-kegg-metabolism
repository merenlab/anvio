#!/usr/bin/env python
# -*- coding: utf-8

import sys
import argparse

import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths
import anvio.interactive as interactive
from anvio.bottleroutes import BottleApplication

from anvio.errors import ConfigError, FilesNPathsError, DictIOError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__requires__ = ['contigs-db']  #TODO: update after development
__provides__ = ['kegg-metabolism', 'interactive']
__description__ = "Start the anvi'o interactive interactive for viewing KEGG metabolism data"

run = terminal.Run()
progress = terminal.Progress()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__description__)
    groupI = parser.add_argument_group('INPUT', "The minimum input requirement is an anvi'o contigs DB to display metabolism data for. ")
    groupI.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': True}))

    groupB = parser.add_argument_group('SERVER CONFIGURATION', "For power users.")
    groupB.add_argument(*anvio.A('ip-address'), **anvio.K('ip-address'))
    groupB.add_argument(*anvio.A('port-number'), **anvio.K('port-number'))
    groupB.add_argument(*anvio.A('browser-path'), **anvio.K('browser-path'))
    groupB.add_argument(*anvio.A('server-only'), **anvio.K('server-only'))
    groupB.add_argument(*anvio.A('password-protected'), **anvio.K('password-protected'))

    args = anvio.get_args(parser)
    A = lambda x: args.__dict__[x] if x in args.__dict__ else None

    try:
        args.mode = 'metabolism'
        d = interactive.MetabolismInteractive(args)
        args.port_number = utils.get_port_num(args.port_number, args.ip_address, run=run)

        app = BottleApplication(d)
        app.run_application(args.ip_address, args.port_number)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
    except DictIOError as e:
        print(e)
        sys.exit(-3)
