#!/usr/bin/env python
# -*- coding: utf-8

import argparse
import os
import re
import sys
import time
from collections import Counter

import anvio

import anvio.terminal as terminal
import anvio.scgsdatabase as scgsdatabase

from anvio.errors import ConfigError
from anvio.errors import FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Quentin Clayssen"
__email__ = "quentin.clayssen@gmail.com"


run = terminal.Run()
progress = terminal.Progress()

#def main(args):





if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Create diamond file, with common protein between import fasta of SCGs with taxonomy and HMM from anvi'o.")

    parser.add_argument('-hm', '--hmms', default = None,
                        help = "fasta file of hmm from anvi'o HMM profiling ")
    parser.add_argument('-g', '--genes_files_directory', default = None,
                        help = "directory with fasta file for import SCGs")
    parser.add_argument('-o', '--out_put_directory', default = None,
                        help = "out put directory")
    parser.add_argument('-t', '--taxonomy_files', default = None,
                        help = "tsv file with taxonomy")
    parser.add_argument('-s', '--scgs_directory', default = None,
                        help = "directory where is are mutisequence aligment of SCGs you want use for taxonomy assignation")
    parser.add_argument('-tl', '--taxonomy_level', default = None,
                        help = "taxonomy_level")
    parser.add_argument('-f', '--no-filter', default = None,
                        help = "filter for tsv file")
    parser.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))

    args = anvio.get_args(parser)

    try:
        scgsdatabase = scgsdatabase.SCGsDataBase(args)
        scgsdatabase.make_scg_db()
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
