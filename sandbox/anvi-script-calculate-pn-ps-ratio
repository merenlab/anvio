#!/usr/bin/env python
# -*- coding: utf-8
"""
Calculates pN/pS, the metagenomic analogy of dN/dS
Citations: doi:10.1038/nature11711, doi:10.7717/peerj.2959 (and references therein)
"""

import sys
import time
import argparse

import numpy as np
import pandas as pd

import anvio

from anvio.errors import ConfigError
from anvio.variabilityops import variability_engines, VariabilityData


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Evan Kiefl"
__email__ = "kiefl.evan@gmail.com"


def calculate_pN_pS_ratio(args):

    var_dict = {}
    columns_to_keep = ['corresponding_gene_call', 'sample_id', 'engine']
    args.columns_to_load = ['corresponding_gene_call', 'sample_id', 'coverage', 'departure_from_consensus']
    for engine, table_path in {'AA': args.saav_table, 'CDN': args.scv_table}.items():

        # init variability table as VariabilityData class object
        args.engine = engine
        args.variability_profile = table_path
        var = VariabilityData(args)

        # filter by departure_from_consensus
        var.filter_data(criterion='departure_from_consensus', verbose=True)

        # filter by departure_from_consensus
        var.filter_data(criterion='coverage', verbose=True)

        # add label for engine
        var.data['engine'] = engine

        # optimize speed by subsetting to only necessary columns
        var.data = var.data[columns_to_keep]

        var_dict[engine] = var

    # concat the two engine-specific dataframes into a master dataframe
    df = pd.concat([var_dict['CDN'].data, var_dict['AA'].data], ignore_index=True)

    # only genes and samples that are have at least one SCV / SAAV are known to the program
    genes = df['corresponding_gene_call'].unique()
    samples = df['sample_id'].unique()

    # creation of table
    i = 0
    start_time = time.time()
    d = {sample: [] for sample in samples}
    for gene in genes:
        # store this df because its used as many times as there are samples
        temp1 = df[df['corresponding_gene_call'] == gene]

        for sample in samples:
            temp2 = temp1[temp1['sample_id'] == sample]
            counts = temp2['engine'].value_counts()

            if counts.get('CDN', 0) < args.minimum_num_variants:
                d[sample].append(np.nan)
            else:
                d[sample].append(counts.get('AA', 0) / (counts['CDN'] - counts.get('AA', 0)))

        if i % 100 == 0:
            print('Processed {} of {} genes. {}m{}s elapsed.'.format(i, len(genes), int((time.time()-start_time) // 60), int((time.time()-start_time) % 60)))
        i += 1

    d = pd.DataFrame(d)
    d.index = genes
    d.to_csv('fixme', sep="\t", index = True, index_label = "gene_callers_id")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Extract information for variable positions')

    groupV = parser.add_argument_group('VARIABILITY', 'Two variability tables generated from \
                                                       anvi-gen-variability-table are required. One \
                                                       of SAAVs (generated with --engine AA) and one \
                                                       of SCVs (generated with --engine CDN). They \
                                                       must be generated with the same profile database and \
                                                       the exact same set of genes in the contigs \
                                                       database. To be safe, it is highly recommended you \
                                                       use the same settings during both commands except \
                                                       for changing --engine AA to --engine CDN and the \
                                                       output filename.')
    groupE = parser.add_argument_group('TUNABLES',    'Successfully tune one or more of these \
                                                       parameters to unlock the "Advanced anvi\'an" \
                                                       achievement.')

    groupV.add_argument('-a', '--saav-table', help='Filepath to the SAAV table.')
    groupV.add_argument('-c', '--scv-table', help='Filepath to the SCV table.')
    groupE.add_argument(*anvio.A('min-departure-from-consensus'), **anvio.K('min-departure-from-consensus',
                                                     {'default': 0.1, 'help': 'Variants (either SCVs or \
                                                       SAAVs) will be ignored if they have a departure \
                                                       from consensus less than this value. Note: Keep \
                                                       in mind you may have already supplied this parameter \
                                                       during anvi-gen-variability-profile. Default is 0.1.'}))
    groupE.add_argument('-i', '--minimum-num-variants', default=4, type=int, required=False, help='Ignore genes \
                                                       with less than this number of single codon \
                                                       variants. This avoids being impressed by \
                                                       pN/pS values of infinite, when really all \
                                                       that happened was a gene had 1 SAAV and 0 \
                                                       synonymous SCVs. The default is 4 to ensure \
                                                       some level of statistical importance.')
    groupE.add_argument('-m', '--min-coverage', default=30, type=int, required=False,
                                                       help='If the coverage value at a codon \
                                                       is less than this amount, any SAAVs or SCVs \
                                                       associated with it will be ignored.')
    groupE.add_argument('-o', '--output', required=True, help='Output filepath.')

    args = anvio.get_args(parser)

    try:
        calculate_pN_pS_ratio(args)
    except ConfigError as e:
        print(e)
        sys.exit(1)
