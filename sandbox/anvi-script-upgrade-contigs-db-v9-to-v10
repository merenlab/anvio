#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import gzip
import h5py
import time
import shutil
import argparse
import numpy as np

import anvio.db as db
import anvio.dbops as dbops
import anvio.terminal as terminal 

from anvio.errors import ConfigError

current_version = "9"
next_version = "10"

run = terminal.Run()
progress = terminal.Progress()

nt_position_info_table_name       = 'nt_position_info'
nt_position_info_table_structure  = ['contig_name', 'position_info']
nt_position_info_table_types      = [    'str'    ,      'blob'    ]

def convert_numpy_array_to_binary_blob(array, compress=True):
    if compress:
        return gzip.compress(memoryview(array), compresslevel=1)
    else:
        return memoryview(array)


def update_contigs_db(contigs_db_path, just_do_it=False, ignore_auxiliary=False):
    if contigs_db_path is None:
        raise ConfigError("No database path is given.")

    dbops.is_contigs_db(contigs_db_path)

    contigs_db = db.DB(contigs_db_path, None, ignore_version = True)
    if str(contigs_db.get_version()) != current_version:
        raise ConfigError("Version of this contigs database is not %s (hence, this script cannot really do anything)." % current_version)

    if not just_do_it:
        try:
            run.warning("This script will try to upgrade your profile database from v%s to v%s. \
                         If you think you are ready, just press ENTER to continue. If you want to cancel \
                         the upgrade and think more about it, press CTRL+C now. If you want to avoid\
                         this message the next time, use '--just-do-it'." % (current_version, next_version))
            input("Press ENTER to continue...\n")
        except:
            print()
            sys.exit()

    # backup profile db
    shutil.copyfile(contigs_db_path, contigs_db_path + '.backup_v' + str(current_version))

    if ignore_auxiliary:
        run.warning("Ignoring auxiliary data")
    else:
        auxiliary_path = ''.join(contigs_db_path[:-3]) + '.h5'
        new_auxiliary_path = ''.join(contigs_db_path[:-3]) + '-AUXILIARY.db'

        if not os.path.exists(auxiliary_path):
            raise ConfigError("This upgrade script mainly targets %s, but couldn't find any. \
                               You can use --ignore-auxiliary flag." % auxiliary_path)

        fp = h5py.File(auxiliary_path, 'r')
        G = lambda x: fp.attrs[x].decode('utf-8') if isinstance(fp.attrs[x], bytes) else fp.attrs[x]
        auxiliary_db = db.DB(new_auxiliary_path, '2', new_database=True)

        auxiliary_db.set_meta_value('db_type', 'auxiliary data for coverages')
        auxiliary_db.set_meta_value('contigs_db_hash', G('hash'))
        auxiliary_db.set_meta_value('creation_date', time.time())
        auxiliary_db.create_table(nt_position_info_table_name, nt_position_info_table_structure, nt_position_info_table_types)

        contig_names_in_db = list(fp['/data/nt_position_info'].keys())

        run.info("Auxiliary data file found", auxiliary_path)
        run.info("Contigs found", len(contig_names_in_db))
        run.info("New auxiliary data path", new_auxiliary_path)

        progress.new('Processing auxiliary')
        counter, total = 0, len(contig_names_in_db)

        entries = []
        for contig_name in contig_names_in_db:
            entries.append((contig_name, convert_numpy_array_to_binary_blob(fp['/data/nt_position_info/%s' % (contig_name)].value),))

            counter += 1
            progress.update('Completed %d of %d contigs' % (counter, total))

            if counter % 10 == 0:
                progress.update("Writing buffer to the database...")
                auxiliary_db.insert_many(nt_position_info_table_name, entries=entries)
                entries = []

        auxiliary_db.insert_many(nt_position_info_table_name, entries=entries)

        progress.end()
        auxiliary_db.disconnect()
        fp.close()

        run.info_single('Done! New auxiliary data file "%s" created successfully you may delete old "%s"' % (new_auxiliary_path, auxiliary_path))

    contigs_db.remove_meta_key_value_pair('version')
    contigs_db.set_version(next_version)
    contigs_db.disconnect()

    run.info_single('Done! Your contigs db is now %s.' % next_version)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A simple script to upgrade CONTIGS.db and CONTIGS.h5 from version %s to version %s' % (current_version, next_version))
    parser.add_argument('contigs_db', metavar = 'CONTIGS_DB', help = 'Contigs database at version %s' % current_version)
    parser.add_argument('--just-do-it', default=False, action="store_true", help = "Do not bother me with warnings")
    parser.add_argument('--ignore-auxiliary', default=False, action="store_true", help = "Do not bother me with warnings")
    args = parser.parse_args()

    try:
        update_contigs_db(args.contigs_db, just_do_it = args.just_do_it, ignore_auxiliary = args.ignore_auxiliary)
    except ConfigError as e:
        print(e)
        sys.exit(-1)