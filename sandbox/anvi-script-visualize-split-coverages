#!/usr/bin/env Rscript

## Last update: 2019-06-20 (mooreryan)

## To run unit tests:
##
## - Install the `testthat` package.
##
## - The test runner is located ${anvio_source_dir}/anvio/tests/sandbox/test_visualize_split_coverages/test_visualize_split_coverages.R
##
## - Run the test runner with Rscript at the terminal.

## To add a new chart type:
##
## - Pick a name for your new chart type, e.g., 'box', then add that
##   to the `available_chart_types` variable in the `check_chart_type`
##   function.
##
## - Add any other opts that your program needs to the `set_up_opts`
##   function, and add to the description banner if necessary.
##
## - Add a new plot function that takes `dat` and `opts`.  E.g.,
##   box_plot <- function(dat, opts) { ... }.  Make sure this function
##   returns a ggplot2 object ready to be plotted by the wrapper
##   functions.
##
## - Add this function to the option list of the `draw_plot` wrapper
##   function.

## Use packages.  Will exit if missing the package.  Supress messages
## about overwritten methods.
suppressMessages(library(ggplot2))
suppressMessages(library(optparse))

#### Logging functions ####

## Generate a logging function with the given `verbosity`.  Only
## prints messages that are higher in priority than the given
## `verbosity` level.
make_logger <- function(verbosity = 2) {
    ## Lower verbosity means less verbose.  So only messages less than
    ## verbosity level will get printed.  This is a lookup function
    ## for verbosity levels.
    log_level <- function(msg_type) {
        switch(
            msg_type,
            "UNKNOWN" = 1,
            "FATAL" = 1,
            "ERROR" = 1,
            "WARN" = 2,
            "INFO" = 2,
            "DEBUG" = 3,
            3 # default
        )
    }

    ## Expects a valid msg_type.  `msg` can be a format string as it
    ## is passed to sprintf.`...` can be used to pass sprintf style
    ## format string opts.
    log_msg <- function(msg_type, msg, ...) {
        ## Messages look like this:
        ## E, [2019-06-20 18:21:28.150640 #18632] ERROR -- Hi error
        now <- strftime(Sys.time(), format = "%Y-%m-%d %H:%M:%OS6")
        pid <- Sys.getpid()
        msg_code <- substr(msg_type, start = 1, stop = 1)
        msg_prefix <- sprintf(
            "%s, [%s #%d] %s -- ",
            msg_code,
            now,
            pid,
            msg_type
        )

        if (log_level(msg_type) <= verbosity) {
            write(
                paste0(
                    msg_prefix,
                    sprintf(msg, ...)),
                file = stderr())
        }
    }

    structure(
        list(
            unknown = function(msg, ...) {
                log_msg("UNKNOWN", msg, ...)
            },
            fatal = function(msg, ...) {
                log_msg("FATAL", msg, ...)
            },
            error = function(msg, ...) {
                log_msg("ERROR", msg, ...)
            },
            warn = function(msg, ...) {
                log_msg("WARN", msg, ...)
            },
            info = function(msg, ...) {
                log_msg("INFO", msg, ...)
            },
            debug = function(msg, ...) {
                log_msg("DEBUG", msg, ...)
            }
        ),
        class = "logger"
    )
}

#### End logging functions ####

#### Utility functions ####

## Write a `msg` to stderr then exit with code 1.
abort <- function(msg, ...) {
    logger$fatal(msg, ...)
    quit(save = "no", status = 1, runLast = FALSE)
}

is_hex_color <- function(color) {
    grepl("#[0-9a-fA-F]{6}", color)
}

## `formula` should refer to variable names in the `df`.  First thing
## in the formula is the data, and the second thing is the
## variable/group that you want to group the first thing by.
sapply_by_group <- function(formula, df, fn, ...) {
    agg <- aggregate(formula, df, fn, ...)
    vec <- as.vector(t(agg[2]))
}

#### These functions are used for compression ####
get_points_per_sample <- function(split_coverages) {
    aggregate(
        coverage ~ sample_name,
        split_coverages,
        length
    )$coverage
}

get_window_size <- function(sample_size) {
    ## This size was chosen because it reduces the size, but still
    ## looks nice over a large range of values.
    window_size <- floor(sample_size / 1000 * 3)

    ## Window size must be odd.
    ifelse(window_size %% 2 == 0,
           window_size + 1,
           window_size)
}

## Smooths the coverage using running medians of size `window_size`,
## group-by-group.  Output is sorted by sample_name (according to
## their factor levels), so the result may NOT be in the same order as
## the input data frame if the input data frame is NOT sorted by
## sample_name first.
smooth_coverage <- function(split_coverages, window_size) {
    sapply_by_group(
        coverage ~ sample_name,
        split_coverages,
        runmed,
        k = window_size
    )
}

## Takes each point whose x_values mod `window_size` is zero.  Also
## take the last point in each sample to get the whole contig.
shrink_data <- function(split_coverages, window_size) {
    ## Get max x_values in each sample.
    agg <- aggregate(
        x_values ~ sample_name,
        split_coverages,
        max
    )

    ## Merge in the max x_values with the rest of split_coverages data.
    merged <- merge(
        split_coverages,
        agg,
        by = "sample_name",
        all.x = TRUE,
        suffixes = c("", ".max")
    )

    ## Take only rows whose x_values divides the window size, plus
    ## the last row for each sample.
    subset(merged,
           x_values %% window_size == 0 | x_values == x_values.max)
}

## Applies a hard cap to coverage values.  Replaces any above the cap
## with `max_coverage`.
cap_coverage <- function(coverage, max_coverage) {
    ifelse(coverage > max_coverage,
           max_coverage,
           coverage)
}

## Opposite of %in%
"%nin%" <- Negate("%in%")

#### End utility functions ####

#### Functions to handle user input ####

check_required_args <- function(opts) {
    ## Make sure the required args are given.
    required_args = c("infile", "outfile")
    for (arg in required_args) {
        if (is.null(opts[[arg]])) {
            msg <- paste0("'",
                          arg,
                          "' is a required argument.")
            abort(msg)
        }
    }
}

check_infile <- function(opts) {
    ## Make sure the infile exists.
    if (!file.exists(opts$infile)) {
        abort(paste0("Input file '",
                     opts$infile,
                     "' does not exist!"))
    }
}

check_outfile <- function(opts) {
    ## Make sure the directory of the outfile exists.
    outdir <- dirname(opts$outfile)
    if (!dir.exists(outdir)) {
        abort(paste0("Directory '",
                     outdir,
                     "' for the outfile '",
                     opts$outfile,
                     "' does not exist!"))
    }
}

check_sample_data_file <- function(opts) {
    ## Check that the additional data file exists if it is given.
    if (!is.null(opts$sample_data) && !file.exists(opts$sample_data)) {
        abort(paste0("Additional data file '",
                     opts$sample_data,
                     "' does not exist!"))
    }
}

## Check that double type options are actually doubles.
check_typeof_double_opts <- function(opts) {
    double_type_opts <- c("whole_chart_width",
                          "individual_chart_height",
                          "max_coverage",
                          "compress_threshold",
                          "window_size")
    for (arg in double_type_opts) {
        if (typeof(opts[[arg]]) != "double") {
            abort(paste0("the type of '",
                         arg,
                         "' should be double, but got '",
                         typeof(opts[[arg]])))
        }
    }
}

## Some options control sizes of things.  In general these should be
## at least 1.
check_size_opts <- function(opts) {
    ## Any of these options are sizes and should be >= 1.
    size_opts <- c("whole_chart_width",
                   "individual_chart_height",
                   "max_coverage",
                   "compress_threshold")
    for (arg in size_opts) {
        if (opts[[arg]] < 1) {
            abort(paste0("'",
                         arg,
                         "' should be >= 1.  Got '",
                         opts[[arg]],
                         "'."))
        }
    }
}

## Window size must be odd.  If it is even, bump it up to the next odd
## number.
check_window_size <- function(opts) {
    ## Anything less than 1 means auto, so only bump things > 1.
    if (opts$window_size >= 1 && opts$window_size %% 2 == 0) {
        logger$warn("--window-size must be odd.  Got '%f', using '%f' instead.",
                    opts$window_size,
                    opts$window_size + 1)

        opts$window_size <- opts$window_size + 1
    }
}


## Only certain charting types have been implemented.  Make sure user
## selects one of these.
check_chart_type <- function(opts) {
    ## Make sure chart type is available.
    available_chart_types = c("area", "line")
    ## Chart type has a default so we don't need to check for its
    ## existance.
    if (opts$chart_type %nin% available_chart_types) {
        abort(paste0("bad chart type.  Chart type must be one of: ",
                     paste(available_chart_types, collapse = ", "),
                     ". Got '",
                     opts$chart_type,
                     "'."))
    }
}

## Only 1, 2, and 3 are valid args.
check_verbosity <- function(opts) {
    verbose_opts <- 1:3
    if (opts$verbose %nin% verbose_opts) {
        abort(paste0("bad argument to --verbose.  Must be one of: ",
                     paste(verbose_opts, collapse = ", "),
                     ". Got '",
                     opts$verbose,
                     "'."))
    }
}

## This function is called in the main part of the script.
## `opts` is the output of parse_args function
check_opts <- function(opts) {
    check_required_args(opts)
    check_infile(opts)
    check_outfile(opts)
    check_sample_data_file(opts)
    check_typeof_double_opts(opts)
    check_size_opts(opts)
    check_window_size(opts)
    check_chart_type(opts)
    check_verbosity(opts)
}

#### End user input checking functions ####

#### Parsing functions

## Parse the split coverages file.
parse_split_coverages <- function(opts) {
    ## Sanity check: split coverages should always be given.
    ## check_opts ensures this.
    if (is.null(opts$infile)) {
        abort("missing '$infile' from opts list")
    }

    split_coverages <- read.table(opts$infile,
                                  header = TRUE,
                                  sep = "\t")

    ## Check split coverage header rows
    expected_split_cov_header <- c(
        "unique_entry_id",
        "nt_position",
        "split_name",
        "sample_name",
        "coverage"
    )
    if (any(names(split_coverages) != expected_split_cov_header)) {
        abort("bad header row in split coverages file")
    }

    ## Lots of steps expected nicely sorted data frame, so sort it by
    ## sample_name, then split_name, then nt_position.
    split_coverages <- split_coverages[order(split_coverages$sample_name,
                                             split_coverages$split_name,
                                             split_coverages$nt_position), ]

    ## If there are multiple split_names in the split coverages file,
    ## we need to make sure they are all sorted properly, then we need
    ## to treat all split_names within a single contig as one big
    ## super-contig.
    if (length(unique(split_coverages$split_name)) > 1) {
        logger$debug("Multiple split_names found")
        ## Get number of positions (rows) for all splits per sample.
        sample_counts <- table(split_coverages$sample_name)

        ## Make sample-wide nucleotide positions.  Each sample has
        ## nucleotide positions running from 0 to count - 1.

        ## This will be a list if the samples have different total
        ## numbers of nucleotides (e.g., different numbers of splits)
        ## or a matrix if all samples have exactly the same number of
        ## nucleotides.
        nt_posns_by_sample <- sapply(sample_counts, function(count) { 0:(count - 1) })

        ## unlist() followed by as.vector() handles both of the above
        ## cases.
        split_coverages$x_values <- as.vector(unlist(nt_posns_by_sample))
    } else {
        ## Use the regular nt_position as the x_values.
        split_coverages$x_values <- split_coverages$nt_position
    }

    if (!opts$no_compression) {
        logger$debug("Compression is on")
        ## Check if the samples are big enough for compression

        ## Number of data points per sample.
        points_per_sample <- get_points_per_sample(split_coverages)


        ## Check if we need to compress.
        if (any(points_per_sample > opts$compress_threshold)) {

            ## If window_size is set to auto, then we need to calculate it now.
            if (opts$window_size < 1) {
                logger$debug("Automatically setting the window size.")

                ## Warn if not all points per sample are equal
                if (length(unique(points_per_sample)) > 1) {
                    logger$warn("Not all samples have the same number of points!  Setting compression to the largest sample.")
                }

                sample_size<- max(points_per_sample)
                logger$info("Largest sample has %d points", sample_size)

                opts$window_size <- get_window_size(sample_size)
            }

            logger$info("Compressing samples.  Window size is %d", opts$window_size)
            logger$info("Total data points before compression: %d", nrow(split_coverages))


            ## Replace orig. coverage with smoothed cov.
            split_coverages$coverage <- smooth_coverage(split_coverages, opts$window_size)

            split_coverages <- shrink_data(split_coverages, opts$window_size)

            logger$info("Total data points after compression: %d", nrow(split_coverages))
        }
    }

    ## Cap the coverage at the max coverage value.
    logger$info("Coverage will be capped at %d", opts$max_coverage)
    split_coverages$coverage <- cap_coverage(split_coverages$coverage, opts$max_coverage)

    split_coverages
}


## Check sample_data headers
check_sample_data_headers <- function(sample_data) {
    if (any(names(sample_data) != c("sample_name", "sample_color"))) {
        abort("bad header row in additional data file")
    }
}

## Check that all color names are either named R colors or
## hexcodes.  If not, just make them black.
fix_colors <- function(sample_data) {
    sapply(
        sample_data$sample_color,
        function(color) {
            ifelse(color == "" || (color %nin% colors() && !is_hex_color(color)),
                   "#333333",
                   as.character(color))
        }
    )
}

parse_sample_data <- function(opts) {
    if (is.null(opts$sample_data)) {
        sample_data = NULL
    } else {
        sample_data = read.table(opts$sample_data,
                                 header = TRUE,
                                 sep = "\t",
                                 comment.char = "")

        check_sample_data_headers(sample_data)
        sample_data$sample_color <- fix_colors(sample_data)
    }

    sample_data
}


check_sample_names <- function(sample_data, sample_names) {
    ## Make sure all sample names in additional data are present
    ## in original data.
    if (any(sample_data$sample_name %nin% sample_names)) {
        abort("There were sample names in the additional data file not present in the split coverages file")
    }
}

subset_split_coverages <- function(split_coverages, sample_data) {
    ## If additional data is here, we need to subset the split
    ## coverages data.  Only samples listed in the additional data
    ## file are to be drawn.
    split_coverages_subset <- subset(split_coverages,
                                     sample_name %in% sample_data$sample_name)

    if (nrow(split_coverages) != nrow(split_coverages_subset)) {
        logger$info("Not all samples in the split coverages file were present in the sample data file.")
    }

    split_coverages_subset
}

sort_split_coverages <- function(split_coverages, sample_data) {
    ## We also want to sort the dataframe by the order of sample
    ## names in the additional data file.  So set the factor
    ## levels by the order they appear in additional data file.
    split_coverages$sample_name <- factor(split_coverages$sample_name,
                                          levels = sample_data$sample_name)

    ## First order by sample name, then by x_values.  Sort by x_values
    ## rather than first by split_name as the x_values will have
    ## already been set up to be in the correct order regardless of
    ## whether there are multiple split names in the file.
    split_coverages[order(split_coverages$sample_name,
                          split_coverages$x_values), ]
}

add_sample_data <- function(split_coverages, sample_data) {
    ## Add sample data to split_coverages df.  Left outer join to
    ## ensure all data points are there.  Though the additional
    ## data should have every sample that is in split coverages.
    merge(x = split_coverages,
          y = sample_data,
          by = "sample_name",
          all.x = TRUE)
}

## This function is called in the main part of the script.
parse_input_data <- function(opts) {
    split_coverages <- parse_split_coverages(opts)
    sample_data <- parse_sample_data(opts)

    ## If sample_data file is given, we need to adjust the split
    ## coverages data frame.
    if (!is.null(sample_data)) {
        logger$info("Sample_data given.  Adjusting split_coverages.")
        ## Make sure the names in sample_data df are okay.
        check_sample_names(sample_data, split_coverages$sample_name)

        logger$debug("Before reading sample_data, there were %d samples.",
                     length(unique(split_coverages$sample_name)))

        split_coverages <- subset_split_coverages(split_coverages, sample_data)
        split_coverages <- sort_split_coverages(split_coverages, sample_data)
        split_coverages <- add_sample_data(split_coverages, sample_data)

        logger$debug("After reading sample_data, %d samples were kept.",
                     length(unique(split_coverages$sample_name)))
    }

    list(split_coverages = split_coverages,
         sample_data = sample_data,
         ## Take sample names here in case any samples were removed
         ## above.
         sample_names = split_coverages$sample_name)
}

#### End parsing functions and helpers ####


#### Plotting functions ####

area_plot <- function(dat, opts) {
    ## Set up the coverage chart.
    cov_plot <- ggplot(dat$split_coverages,
                       aes(x = x_values,
                           y = coverage,
                           group = sample_name))

    if (is.null(dat$split_coverages$sample_color)) {
        cov_plot <- cov_plot + geom_area()
    } else {
        cov_plot <- cov_plot + geom_area(fill = dat$split_coverages$sample_color)
    }


    cov_plot <- cov_plot + theme_bw()
    cov_plot <- cov_plot + theme(legend.position = "none")

    if (opts$free_y_scale)
        cov_plot <- cov_plot + facet_grid(sample_name ~ ., scales="free_y")
    else
        cov_plot <- cov_plot + facet_grid(sample_name ~ .)

    cov_plot <- cov_plot + labs(x = "Nucleotide position", y = "Coverage")

    cov_plot
}

line_plot <- function(dat, opts) {
    ## Set up the coverage chart.
    cov_plot <- ggplot(dat$split_coverages,
                       aes(x = x_values,
                           y = coverage,
                           group = sample_name))

    if (is.null(dat$split_coverages$sample_color)) {
        cov_plot <- cov_plot + geom_line()
    } else {
        cov_plot <- cov_plot + geom_line(color = dat$split_coverages$sample_color)
    }

    cov_plot <- cov_plot + theme_bw()
    cov_plot <- cov_plot + theme(legend.position = "none")

    if (opts$free_y_scale)
        cov_plot <- cov_plot + facet_grid(sample_name ~ ., scales="free_y")
    else
        cov_plot <- cov_plot + facet_grid(sample_name ~ .)

    cov_plot <- cov_plot + labs(x = "Nucleotide position", y = "Coverage")

    cov_plot
}

## This function is called in the main part of the script.
## Wrapper fn to handle plot drawing.
draw_plot <- function(...) {
    if (opts$chart_type == "area") {
        area_plot(...)
    } else if (opts$chart_type == "line") {
        line_plot(...)
    } else {
        ## Sanity check: check_opts should prevent this from happening.
        abort("bad chart type")
    }
}

## This function is called in the main part of the script.
## Fn to write plot to disk.
write_plot <- function(gg_plot, dat, opts) {
    pdf(opts$outfile,
        width = opts$whole_chart_width,
        height = opts$individual_chart_height * length(levels(dat$sample_names)))
    print(gg_plot)
    suppressMessages(invisible(dev.off()))
}

#### Optparse ####
set_up_opts <- function() {
    option_list <- list(
        ## Infile options
        make_option(opt_str = c("-i", "--infile"),
                    action = "store",
                    type = "character",
                    help = "Path to infile (i.e., output of anvi-get-split-coverages)"),
        make_option(opt_str = c("-s", "--sample-data"),
                    action = "store",
                    type = "character",
                    help = "Path to additional data file"),

        ## Outfile options
        make_option(opt_str = c("-o", "--outfile"),
                    action = "store",
                    type = "character",
                    help = "Path to outfile"),

        ## Chart options
        make_option(opt_str = c("-w", "--whole-chart-width"),
                    action = "store",
                    type = "double",
                    default = 10.0,
                    help = "Width of the whole chart [default %default]"),
        make_option(opt_str = c("-c", "--individual-chart-height"),
                    action = "store",
                    type = "double",
                    default = 2.0,
                    help = "Height of each individual coverage chart [default %default]"),
        make_option(opt_str = c("-t", "--chart-type"),
                    action = "store",
                    type = "character",
                    default = "area",
                    help = "What type of chart do you want? [default %default]"),

        ## Data "compression"
        make_option(opt_str = c("-m", "--max-coverage"),
                    action = "store",
                    type = "double",
                    default = 1000,
                    help = "Max coverage.  Any value g.t. this will be capped at this value. [default %default]"),
        make_option(opt_str = c("-p", "--compress-threshold"),
                    action = "store",
                    type = "double",
                    default = 1000,
                    help = "If samples have more data points than this, they will be compressed. [default %default]"),
        make_option(opt_str = c("-f", "--free-y-scale"),
                    action = "store_true",
                    type = "logical",
                    default = FALSE,
                    help = "Depending on the visualization strategy, the y-axis of the plot may be scaled to the common max.\
                        Use this flag to let them go free so every single plot has its own maximum \
                        value. [default %default]"),
        make_option(opt_str = c("-n", "--window-size"),
                    action = "store",
                    type = "double",
                    default = 0,
                    help = "Window size for compression.  Higher number = more compression. Pass 0 for auto. [default %default]"),
        make_option(opt_str = c("-r", "--no-compression"),
                    action = "store_true",
                    type = "logical",
                    default = FALSE,
                    help = "Pass this flag if you want no compression.  Overrides other compression opts."),

        ## Verbosity
        make_option(opt_str = c("-v", "--verbose"),
                    action = "store",
                    type = "numeric",
                    default = 2,
                    help = "Set the verbosity level (1, 2, or 3).  Higher number = more log messages.  [default %default]")

    )

    usage <- "%prog -i infile.txt -o coverage_graphs.pdf [-s sample_data.txt] [-w chart_width] [-c chart_height] [-t chart_type] [-m max_coverage] [-p compress-threshold] [-n window-size] [--no-compression] [--free-y-scale] [--verbose level]"

    description <- "
Description:
  Generate PDF image of coverage for splits across multiple samples.

  - The input file required for this script is the output of the
    program anvi-get-split-coverages.

  - Any color that is not included in `colors()` or a valid hex code
    (e.g., #00FF00) will be changed to '#333333'.

  - Current options for --chart-type include: 'area', 'line'

  Compression: ggplot2 can take a long time to plot lots of data
  points.  Even a smallish data (a couple of samples, ~30,000 data
  points per samples) can take a few minutes to plot.

    --compress-threshold ...if samples have more data points than this,
      then they will be compressed.

    --window-size ...Sets the window size for the compression.  The
      higher this number is, the more compression.  Setting the
      window size < 1 will let the program automatically determine a
      reasonable window size depending on your data.

    --no-compression ...Pass this flag if you want to completely
      bypass compression regardless of any other compression options."

    opts <- parse_args(OptionParser(usage = usage,
                                    option_list = option_list,
                                    description = description),
                       convert_hyphens_to_underscores = TRUE)

    opts
}

## Do not edit the comment on the next line, or you will break the unit tests!!
#### End of function definitions ####

opts <- set_up_opts()

## Set up logger
logger <- make_logger(opts$verbose)

## Nicely print options
logger$debug("Opts %s",
             apply(rbind(names(opts),
                         as.vector(unlist(opts))),
                   2,
                   paste,
                   collapse = ": "))

logger$info("Checking options")
check_opts(opts)

logger$info("Parsing input data")
dat <- parse_input_data(opts)

logger$info("Making coverage plots")
cov_plot <- draw_plot(dat, opts)

logger$info("Writing coverage plots")
write_plot(cov_plot, dat, opts)

logger$info("Done!")
