#!/usr/bin/env python
# -*- coding: utf-8

import sys
import argparse

import anvio.db as db
import anvio.dbops as dbops
import anvio.terminal as terminal 

from anvio.errors import ConfigError


run = terminal.Run()
progress = terminal.Progress()


def update_profile_db_from_v15_to_v16(profile_db_path, just_do_it = False):
    if profile_db_path is None:
        raise ConfigError("No profile database is given.")

    # make sure someone is not being funny
    dbops.is_profile_db(profile_db_path)

    # make sure the version is 15
    profile_db = db.DB(profile_db_path, None, ignore_version = True)
    if str(profile_db.get_version()) != '15':
        raise ConfigError("Version of this profile database is not 15 (hence, this script cannot really do anything).")

    is_merged = profile_db.get_meta_value('merged')

    if not just_do_it:
        try:
            run.warning('This script will try to upgrade your profile database. If things go south, you will end up having to\
                         re-profile your data :/ It may be a good idea to back it up first. If you already backed your stuff\
                         or you are certain that it will work, or if you are a lucky person in general, press ENTER to continue.\
                         If you want to cancel the upgrade, press CTRL+C now. If you want to avoid this message the next time,\
                         use "--just-do-it" flag.')
            input("Press ENTER to continue...\n")
        except:
            print()
            sys.exit()

    progress.new("Trying to upgrade the %s profile database" % 'merged' if is_merged else 'single')

    available_clusterings = []
    clusterings = profile_db.get_table_as_dict('clusterings')

    if clusterings:
        profile_db._exec('''DELETE FROM clusterings''')

        for entry in clusterings:
            clustering_id = ':'.join([entry, 'euclidean', 'ward'])
            clustering_newick = clusterings[entry]['newick']
            profile_db._exec('''INSERT INTO clusterings VALUES (?,?)''', tuple([clustering_id, clustering_newick]))
            available_clusterings.append(clustering_id)

        profile_db.remove_meta_key_value_pair('available_clusterings')
        profile_db.set_meta_value('available_clusterings', ','.join(available_clusterings))

        default_clustering = profile_db.get_meta_value('default_clustering')
        profile_db.remove_meta_key_value_pair('default_clustering')
        profile_db.set_meta_value('default_clustering', ':'.join([default_clustering, 'euclidean', 'ward']))

    # set the version
    profile_db.remove_meta_key_value_pair('version')
    profile_db.set_version('16')

    # bye
    profile_db.disconnect()
    progress.end()

    run.info_single("Database successfully upgraded to version 16!")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A simple script to upgrade profile database to from version 15 version 16')

    parser.add_argument('profile_db', metavar = 'PROFILE_DB', help = 'Profile database (of version 15)')
    parser.add_argument('--just-do-it', default=False, action="store_true", help = "Do not bother me with warnings")

    args = parser.parse_args()

    try:
        update_profile_db_from_v15_to_v16(args.profile_db, just_do_it = args.just_do_it)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
