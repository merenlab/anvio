#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys

import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"
__provides__ = ["hmm-source"]
__requires__ = []
__description__ = ("You give this program one or more PFAM accession ids, and it generates "
                   "an anvi'o compatible HMM directory to be used with `anvi-run-hmms`")


run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print


def get_attribute_from_hmm_file(file_path, attribute):
    filesnpaths.is_file_exists(file_path)
    value = None
    with open(file_path) as hmm:
        for line in hmm.readlines():
            if line.startswith(attribute):
                value = [f.strip() for f in line.split(attribute) if len(f)][0]
                break

    return value


def main(args):
    A = lambda x: args.__dict__[x] if x in args.__dict__ else None
    pfam_accession_ids = A('pfam_accessions')
    output_directory_path = A('output_directory') or os.path.abspath('./UNKNOWN_HMMS_FROM_PFAM')

    pfam_accession_ids = [e.strip() for e in set(pfam_accession_ids)]

    run.info('PFAM accessions to work with', ', '.join(pfam_accession_ids))
    run.info('The output directory', output_directory_path)

    filesnpaths.check_output_directory(output_directory_path)

    data_dict = {}

    progress.new("Downloading data_dict", progress_total_items=len(data_dict))
    progress.update('...')
    for pfam_accession in pfam_accession_ids:
        progress.update(pfam_accession + ' ...', increment=True)

        data_dict[pfam_accession] = {}

        fp = filesnpaths.get_temp_file_path()
        utils.download_file(f"http://pfam.xfam.org/family/{pfam_accession}/hmm", fp)

        data_dict[pfam_accession]['ga'] = get_attribute_from_hmm_file(fp, 'GA ')
        data_dict[pfam_accession]['gene'] = get_attribute_from_hmm_file(fp, 'NAME')
        data_dict[pfam_accession]['accession'] = pfam_accession
        data_dict[pfam_accession]['temp_file_path'] = fp
    progress.end()

    # make sure all models have the GA cutoff defined
    pfam_hmms_without_ga = [p for p in pfam_accession_ids if not data_dict[p]['ga']]
    if len(pfam_hmms_without_ga):
        for pfam_accession in data_dict:
            os.remove(data_dict[pfam_accession]['temp_file_path'])

        raise ConfigError(f"Not all PFAM accession ids you are interested in seem to have 'GA' "
                          f"noise cutoff defined in them :/ This script is only able to setup "
                          f"anvi'o HMM directories from data_dict that have that cutoff defined in them. "
                          f"So this is kind of the end of the road for us. Here are the PFAM accessions "
                          f"that violate this: {', '.join(pfam_hmms_without_ga)}.")


    progress.new("Generating the contents of the HMM directory", progress_total_items=len(data_dict))
    progress.update('...')

    # create the output dir
    filesnpaths.gen_output_directory(output_directory_path)
    J = lambda x: os.path.join(output_directory_path, x)
    W = lambda p, c: open(J(p), 'w').write(f'{c}\n')

    # concatenate and compress the genes.hmm
    utils.concatenate_files(J('genes.hmm'), [data_dict[p]['temp_file_path'] for p in data_dict], remove_concatenated_files=True)
    utils.gzip_compress_file(J('genes.hmm'))

    # generate genes output
    with open(J('genes.txt'), 'w') as genestxt:
        genestxt.write("gene\taccession\thmmsource\n")
        for e in data_dict.values():
            genestxt.write(f"{e['gene']}\t{e['accession']}\tpfam.xfam.org\n")

    # kind
    W('kind.txt', 'userdefined')
    W('noise_cutoff_terms.txt', '--cut_ga')
    W('reference.txt', "Anvi'o User, http://localhost")
    W('target.txt', "AA:GENE")

    progress.end()

    run.info_single(f"Congratulations. Your anvi'o formatted HMM directory for "
                    f"{terminal.pluralize('PFAM accession id', len(pfam_accession_ids))} is ready "
                    f"to be used with `anvi-run-hmms` (all you need to do is to provide the path "
                    f"to your new directory using the `--hmm-profile-dir` parameter).", nl_before=1, nl_after=1)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=__description__)

    parser.add_argument('pfam_accessions', nargs='+', help='One or more PFAM accession IDs (such as PF14437.6)', metavar='PFAM_ACCESSION')
    parser.add_argument('-O', '--output-directory', metavar='PATH',
                        help="Output directory for the anvi'o formatted HMM directoryr. Choose wisely as this will be the name that will "
                             "appear in the contigs database after you provide it with `-H` flag to `anvi-run-hmms`.")

    args = anvio.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
